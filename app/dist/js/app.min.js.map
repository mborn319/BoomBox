{"version":3,"sources":["../../js/api.js","../../js/lib.js","../../js/app.js","../../js/main.js"],"names":["Api","self","this","songs","albums","artists","stream","track","album","artist","get","opts","callback","data","lib","ajax","pause","play","type","id","allowedStreamTypes","indexOf","apiUrl","next","prev","api","Lib","selectParent","el","parentSelector","matchesSelector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","call","parentElement","template","str","retstr","prop","regex","RegExp","replace","toDom","tmp","document","createElement","innerHTML","childNodes","serialize","obj","p","hasOwnProperty","push","encodeURIComponent","join","url","method","reqBody","reqMethod","myCallback","e","target","response","myRequest","XMLHttpRequest","responseType","addEventListener","setRequestHeader","addFormData","open","send","app","tracks","init","socket","WebSocket","onopen","ev","onmessage","dat","json","JSON","parse","console","log","setState","playstate","foot","update","loadFromLS","controls","onPrev","onNext","onPlay","getAlbumById","find","item","_id","getArtistById","getTrackById","window","localStorage","warn","getItem","state","playing","artistid","x","albumid","getElementById","preventDefault","playResponse","error","alert","trackEl","querySelector","artistEl","albumEl","playIcon","title","name","classList","remove","add","body","settingsBtn","searchBtn","songTab","artistTab","albumTab","statusBar","songTabClick","loadSongs","albumTabClick","loadAlbums","artistTabClick","loadArtists","dataBox","openSettings","toggle","clear","songTemplate","artistname","length","i","thisArtist","setItem","stringify","loadItems","mediaTemplate","song","appendChild","mediaItem","playbutton","clearBtns","curPlayingSongBtn","dataset","arguments","contains","loadSongsByX","loadSongsByAlbum","loadSongsByArtist","thisAlbum","statusTemplate","artistTitle","click"],"mappings":"AAAA,GAAIA,KAAM,WAKR,GAAIC,GAAOC,IACXD,GAAKE,SACLF,EAAKG,UACLH,EAAKI,WACLJ,EAAKK,UACLL,EAAKK,OAAOC,SACZN,EAAKK,OAAOE,SACZP,EAAKK,OAAOG,UAEZR,EAAKE,MAAMO,IAAM,SAASC,EAAKC,GAC7B,GAAIC,GAAOF,CAEXG,KAAIC,KAAI,gBAAiBF,EAAKD,IAOhCX,EAAKG,OAAOM,IAAM,SAASC,EAAMC,GAC/B,GAAIC,GAAOF,CACXG,KAAIC,KAAI,gBAAiBF,EAAKD,IAEhCX,EAAKI,QAAQK,IAAM,SAASC,EAAMC,GAChC,GAAIC,GAAOF,CACXG,KAAIC,KAAI,iBAAkBF,EAAKD,IAIjCX,EAAKK,OAAOU,MAAQ,SAASJ,GAC3BE,IAAIC,KAAI,0BAA2BH,IAErCX,EAAKK,OAAOW,KAAO,SAASC,EAAMC,EAAIP,GACpC,GAAIQ,IAAqB,QAAO,QAAQ,SACxC,IAAwC,IAApCA,EAAmBC,QAAQH,GAC7B,KAAM,oCAAsCE,CAE9C,IAAwB,kBAAbR,GACT,KAAM,uBAGR,IAAIU,GAAS,kBAAoBJ,EAAO,IAAMC,CAC9CL,KAAIC,KAAKO,KAAUV,IAErBX,EAAKsB,KAAO,SAASX,GACnB,GAAwB,kBAAbA,GACT,KAAM,uBAGRE,KAAIC,KAAI,yBAA0BH,IAEpCX,EAAKuB,KAAO,SAASZ,GACnB,GAAwB,kBAAbA,GACT,KAAM,uBAGRE,KAAIC,KAAI,yBAA0BH,IAIpCX,EAAKK,OAAOC,MAAMU,KAAO,SAASE,EAAGP,GACnCX,EAAKK,OAAOW,KAAI,QAASE,EAAGP,IAE9BX,EAAKK,OAAOE,MAAMS,KAAO,SAASE,EAAGP,GACnCX,EAAKK,OAAOW,KAAI,QAASE,EAAGP,IAE9BX,EAAKK,OAAOG,OAAOQ,KAAO,SAASE,EAAGP,GACpCX,EAAKK,OAAOW,KAAI,SAAUE,EAAGP,IAE/BX,EAAKK,OAAOiB,KAAO,SAASX,GAC1B,GAAIU,GAAS,qBACbR,KAAIC,KAAKO,KAAUV,IAErBX,EAAKK,OAAOkB,KAAO,SAASZ,GAC1B,GAAIU,GAAS,qBACbR,KAAIC,KAAKO,KAAUV,KAInBa,IAAM,GAAIzB,KClFV0B,IAAM,WACR,GAAIzB,GAAOC,IA6GX,OA3GAA,MAAKyB,aAAe,SAASC,EAAIC,GAc/B,IALA,GAAIC,GAAkBF,EAAGG,SAChBH,EAAGI,uBACHJ,EAAGK,oBACHL,EAAGM,kBAELN,IAEJE,EAAgBK,KAAKP,EAAIC,IAI7BD,EAAKA,EAAGQ,aAGP,OAAOR,IAGT1B,KAAKmC,SAAW,SAASC,EAAKzB,GAU5B,GAAI0B,GAASD,CAGb,KAAK,GAAIE,KAAQ3B,GAAM,CAErB,GAAI4B,GAAQ,GAAIC,QAAM,IAAMF,EAAI,IAAA,KAIhCD,GAASA,EAAOI,QAAQF,EAAM5B,EAAK2B,IAErC,MAAOD,IAGTrC,KAAK0C,MAAQ,SAASN,GAMpB,GAAIO,GAAMC,SAASC,cAAa,MAEhC,OADAF,GAAIG,UAAYV,EACTO,EAAII,YAGb/C,KAAKgD,UAAY,SAASC,GAOxB,GAAIb,KACJ,KAAI,GAAIc,KAAKD,GACPA,EAAIE,eAAeD,IACrBd,EAAIgB,KAAKC,mBAAmBH,GAAK,IAAMG,mBAAmBJ,EAAIC,IAElE,OAAOd,GAAIkB,KAAI,MAGjBtD,KAAKa,KAAO,SAAS0C,EAAI5C,EAAKD,EAAS8C,GACrC,GAAIC,GAAU,GAEVC,EAAYF,EAASA,EAAS,KAIlC,IAHI7C,EAAOA,EAAOA,MAGb4C,EAAO,KAAM,iCAClB,KAAK7C,EAAY,KAAM,sCAEvB,IAAIiD,GAAa,SAASC,GAExBlD,EAASkD,EAAEC,OAAOC,SAASF,EAAEC,SAG3BE,EAAY,GAAIC,eACpBD,GAAUE,aAAe,OACzBF,EAAUG,iBAAgB,OAAQP,GAEhB,SAAdD,GACFK,EAAUI,iBAAgB,eAAiB,oDAC3CV,EAAUW,eACa,QAAdV,IACTH,EAAMA,EAAM,IAAMxD,EAAKiD,UAAUrC,IAInCoD,EAAUM,KAAKX,EAAUH,GACzBQ,EAAUO,KAAK3D,IAGVX,KAETY,KAAM,GAAIY,KClHV+C,KACEpE,SAAS,EACTD,QAAQ,EACRsE,QAAQ,EACRC,KAAM,WACJ,GAAI1E,GAAOC,IAoCX,OAjCAuE,KAAIG,OAAS,GAAIC,WAAS,uBAC1BJ,IAAIG,OAAOE,OAAS,SAASC,KAG7BN,IAAIG,OAAOI,UAAY,SAASC,GAC9B,GAAIC,GAAOC,KAAKC,MAAMH,EAAIpE,KAI1B,QAHAwE,QAAQC,IAAG,8CAAgDJ,GAGpDA,EAAKhE,MACV,IAAK,YAGHuD,IAAIc,SAASL,EAAKM,WAGlBf,IAAIgB,KAAKC,WAUfzF,EAAK0F,aAGL1F,EAAK2F,SAASpE,KAAK4C,iBAAgB,QAAUnE,EAAK2F,SAASC,QAC3D5F,EAAK2F,SAASrE,KAAK6C,iBAAgB,QAAUnE,EAAK2F,SAASE,QAC3D7F,EAAK2F,SAAS3E,KAAKmD,iBAAgB,QAAUnE,EAAK2F,SAASG,QAEpD7F,MAET8F,aAAc,SAAS7E,GAQrB,MAAOsD,KAAIrE,OAAO6F,KAAK,SAASC,GAE9B,MAAOA,GAAKC,MAAQhF,KAGxBiF,cAAe,SAASjF,GAQtB,MAAOsD,KAAIpE,QAAQ4F,KAAK,SAASC,GAE/B,MAAOA,GAAKC,MAAQhF,KAGxBkF,aAAc,SAASlF,GAQrB,MAAOsD,KAAIC,OAAOuB,KAAK,SAASC,GAE9B,MAAOA,GAAKC,MAAQhF,KAGxBwE,WAAY,WACyB,gBAAxBW,QAAOC,aAChBlB,QAAQmB,KAAI,4CAERD,aAAaE,QAAO,YACtBhC,IAAIC,OAASS,KAAKC,MAAMmB,aAAaE,QAAO,YAE1CF,aAAaE,QAAO,aACtBhC,IAAIpE,QAAU8E,KAAKC,MAAMmB,aAAaE,QAAO,aAE3CF,aAAaE,QAAO,YACtBhC,IAAIrE,OAAS+E,KAAKC,MAAMmB,aAAaE,QAAO,cAIlDC,OAUEC,SAAS,EACTnF,MAAM,EACND,MAAM,GAERgE,SAAU,SAASmB,GA4BjB,MApBAjC,KAAIiC,MAAQA,EACZjC,IAAIiC,MAAMjG,QAAS,EACnBgE,IAAIiC,MAAMlG,OAAQ,EAEdiE,IAAIiC,MAAMnG,MAAMqG,UAAYnC,IAAIpE,UAGlCoE,IAAIiC,MAAMjG,OAASgE,IAAIpE,QAAQ4F,KAAK,SAASY,GAC3C,MAAOA,GAAEV,MAAQ1B,IAAIiC,MAAMnG,MAAMqG,YAIjCnC,IAAIiC,MAAMnG,MAAMuG,SAAWrC,IAAIrE,SAGjCqE,IAAIiC,MAAMlG,MAAQiE,IAAIrE,OAAO6F,KAAK,SAASY,GACzC,MAAOA,GAAEV,MAAQ1B,IAAIiC,MAAMnG,MAAMuG,WAI9BrC,IAAIiC,QAGfjC,IAAImB,UAgBFpE,KAAMsB,SAASiE,eAAc,qBAC7BxF,KAAMuB,SAASiE,eAAc,qBAC7B9F,KAAM6B,SAASiE,eAAc,oBAC7BlB,OAAQ,SAAS/B,GAMfA,EAAEkD,iBACEvC,IAAIiC,MAAMlF,MAEZC,IAAInB,OAAOkB,KAAKiD,IAAImB,SAASqB,eAKjCnB,OAAQ,SAAShC,GAMfA,EAAEkD,iBACEvC,IAAIiC,MAAMnF,MAEZE,IAAInB,OAAOiB,KAAKkD,IAAImB,SAASqB,eAKjClB,OAAQ,SAASjC,GASfA,EAAEkD,iBACFvF,IAAInB,OAAOU,MAAMyD,IAAImB,SAASqB,eAEhCA,aAAc,SAAS/B,GACjBA,EAAKgC,OACP7B,QAAQmB,KAAI,6BAA8BtB,GAC1CiC,MAAK,gCAEL9B,QAAQC,IAAG,WAAYJ,GAIvBT,IAAIgB,KAAKlB,UAIfE,IAAIgB,MACF2B,QAAStE,SAASuE,cAAa,0BAC/BC,SAAUxE,SAASuE,cAAa,2BAChCE,QAASzE,SAASuE,cAAa,0BAC/B3B,OAAQ,WAaN,GAAI8B,GAAW/C,IAAImB,SAAS3E,KAAKoG,cAAa,MAG9C5C,KAAIgB,KAAK2B,QAAQpE,UAAYyB,IAAIiC,MAAMnG,MAAMkH,MAC7ChD,IAAIgB,KAAK6B,SAAStE,UAAYyB,IAAIiC,MAAMjG,OAAOiH,KAC/CjD,IAAIgB,KAAK8B,QAAQvE,UAAYyB,IAAIiC,MAAMlG,MAAMiH,MAGxChD,IAAIiC,MAAMnF,KAGbkD,IAAImB,SAASrE,KAAKoG,UAAUC,OAAM,YAFlCnD,IAAImB,SAASrE,KAAKoG,UAAUE,IAAG,YAM5BpD,IAAIiC,MAAMlF,KAGbiD,IAAImB,SAASpE,KAAKmG,UAAUC,OAAM,YAFlCnD,IAAImB,SAASpE,KAAKmG,UAAUE,IAAG,YAK5BpD,IAAIiC,MAAMC,SAMba,EAASG,UAAUC,OAAM,WACzBJ,EAASG,UAAUE,IAAG,cALtBL,EAASG,UAAUE,IAAG,WACtBL,EAASG,UAAUC,OAAM,cAO7BrD,KAAM,WAMJzB,SAASgF,KAAKH,UAAUE,IAAG,iBAI/BpD,IAAIE,MC5QJ,IAAIoD,aAAcjF,SAASiE,eAAc,eACrCiB,UAAYlF,SAASiE,eAAc,aACnCkB,QAAUnF,SAASiE,eAAc,cACjCmB,UAAYpF,SAASiE,eAAc,gBACnCoB,SAAWrF,SAASiE,eAAc,eAClCqB,UAAYtF,SAASiE,eAAc,iBAGnCsB,aAAe,SAASvE,GAM1BA,EAAEkD,iBAEGvC,IAAIC,OAIP4D,UAAU7D,IAAIC,QAFdjD,IAAItB,MAAMO,OAAO4H,WAMnBF,UAAUpF,UAAY,GAGtBmF,SAASR,UAAUC,OAAM,UACzBM,UAAUP,UAAUC,OAAM,UAC1BK,QAAQN,UAAUE,IAAG,WAInBU,cAAgB,SAASzE,GAM3BA,EAAEkD,iBAEGvC,IAAIrE,OAIPoI,WAAW/D,IAAIrE,QAFfqB,IAAIrB,OAAOM,OAAO8H,YAMpBJ,UAAUpF,UAAY,GAGtBiF,QAAQN,UAAUC,OAAM,UACxBM,UAAUP,UAAUC,OAAM,UAC1BO,SAASR,UAAUE,IAAG,WAIpBY,eAAiB,SAAS3E,GAM5BA,EAAEkD,iBAEGvC,IAAIpE,QAIPqI,YAAYjE,IAAIpE,SAFhBoB,IAAIpB,QAAQK,OAAOgI,aAMrBN,UAAUpF,UAAY,GAGtBiF,QAAQN,UAAUC,OAAM,UACxBO,SAASR,UAAUC,OAAM,UACzBM,UAAUP,UAAUE,IAAG,WAKrBc,QAAU7F,SAASiE,eAAc,YAEjC6B,aAAe,WACjB9F,SAASiE,eAAc,gBAAiBY,UAAUkB,OAAM,QAM1Dd,aAAY3D,iBAAgB,QAASwE,cACrCX,QAAQ7D,iBAAgB,QAAUiE,cAClCF,SAAS/D,iBAAgB,QAAUmE,eACnCL,UAAU9D,iBAAgB,QAAUqE,gBACpC3F,SAASiE,eAAc,gBAAiB3C,iBAAgB,QAAU,SAASN,GACtC,mBAAxBwC,QAAOC,eAEhB9B,IAAIrE,QAAS,EACbqE,IAAIpE,SAAU,EACdoE,IAAIC,QAAS,EACb4B,OAAOC,aAAauC,SAEtBhF,EAAEkD,kBAIJ,IAAIsB,WAAY,SAASpD,GACvB,GAAI6D,GAAe,8PAKnB,IAHAtE,IAAIC,OAASQ,GAGRA,EAAK,GAAG8D,YAAcvE,IAAIpE,QAAQ4I,OACrC,IAAK,GAAIC,GAAE,EAAGA,EAAIhE,EAAK+D,OAAQC,IAE7BC,WAAa1E,IAAI2B,cAAclB,EAAKgE,GAAGtC,UACnCuC,aACFjE,EAAKgE,GAAGF,WAAaG,WAAWzB,KAStC,OAJmC,gBAAxBpB,QAAOC,cAChBA,aAAa6C,QAAO,SAAWjE,KAAKkE,UAAUnE,IAGzCoE,UAAUpE,EAAK6D,IAEpBL,YAAc,SAASxD,GACzB,GAAI6D,GAAe,kMAOnB,OALAtE,KAAIpE,QAAU6E,EACqB,gBAAxBoB,QAAOC,cAChBA,aAAa6C,QAAO,UAAYjE,KAAKkE,UAAUnE,IAG1CoE,UAAUpE,EAAK6D,IAEpBP,WAAa,SAAStD,GACxB,GAAI6D,GAAe,iMAOnB,OALAtE,KAAIrE,OAAS8E,EACsB,gBAAxBoB,QAAOC,cAChBA,aAAa6C,QAAO,SAAWjE,KAAKkE,UAAUnE,IAGzCoE,UAAUpE,EAAK6D,IAEpBO,UAAY,SAASpE,EAAMqE,GAC7BZ,QAAQ3F,UAAY,EAGpB,KAAK,GAAIkG,GAAE,EAAEA,EAAEhE,EAAK+D,OAAOC,IAAK,CAE9B,GAAIM,GAAO1I,IAAI8B,MAAM9B,IAAIuB,SAASkH,EAAcrE,EAAKgE,IACrDP,SAAQc,YAAYD,EAAK,GAEX,IAAIE,WAAU5G,SAASiE,eAAe7B,EAAKgE,GAAG/C,QAK5DuD,UAAY,SAASxD,GACvB,GAAIjG,GAAOC,KACPyJ,EAAazD,EAAKmB,cAAa,MAsDnC,OApDAnH,MAAK0J,UAAY,WACf,GAAIC,GAAoB/G,SAASuE,cAAa,eAC1CwC,KACFA,EAAkBlC,UAAUC,OAAM,YAClCiC,EAAkBlC,UAAUE,IAAG,aAInC3H,KAAKe,KAAO,SAAS6C,GAOnB,OANA7D,EAAK2J,YACL1D,EAAKyB,UAAUE,IAAG,UAClB8B,EAAWhC,UAAUC,OAAM,WAC3B+B,EAAWhC,UAAUE,IAAG,YAGjB3B,EAAK4D,QAAQ5I,MAClB,IAAK,QAEHO,IAAInB,OAAOE,MAAMS,KAAKiF,EAAK/E,GAAIsD,IAAImB,SAASqB,aAC5C,MACF,KAAK,SAEHxF,IAAInB,OAAOG,OAAOQ,KAAKiF,EAAK/E,GAAIsD,IAAImB,SAASqB,aAC7C,MACF,KAAK,QAEHxF,IAAInB,OAAOC,MAAMU,KAAKiF,EAAK/E,GAAIsD,IAAImB,SAASqB,gBAMlD/G,KAAKc,MAAQ,SAAS8C,GACpBoC,EAAKyB,UAAUC,OAAM,UACrB+B,EAAWhC,UAAUE,IAAG,WACxB8B,EAAWhC,UAAUC,OAAM,YAC3BnG,IAAIT,MAAMkF,EAAK/E,GAAI,WACjBkE,QAAQC,IAAG,wBAAyByE,cAIxC7J,KAAK2I,OAAS,SAAS/E,GACjBoC,EAAKyB,UAAUqC,SAAQ,UACzB/J,EAAKe,MAAM8C,GAEX7D,EAAKgB,KAAK6C,IAKdoC,EAAKmB,cAAa,YAAajD,iBAAgB,QAASnE,EAAK4I,QAEtD3I,MAEL+J,aAAe,SAASnG,GAC1B,GACItD,GAAQM,IAAIa,aAAamC,EAAEC,OAAQ,gBACnCtD,EAASK,IAAIa,aAAamC,EAAEC,OAAQ,gBAEpCvD,GAEAA,GACA0J,iBAAiB1J,EAAMW,IAEhBV,GAEPA,GACA0J,kBAAkB1J,EAAOU,IAI/B+I,kBAAmB,SAASpD,GAC1B,GAAIsD,GAAY3F,IAAIuB,aAAac,GAC7BuD,EAAiB,uCACjBpF,GACEzE,MAAO4J,EAAU3C,MACjBhH,OAAQgE,IAAI2B,cAAcgE,EAAUxD,UAAUc,KAIpDU,WAAUpF,UAAYlC,IAAIuB,SAASgI,EAAgBpF,GAGnDtE,MACEmG,QAASA,GAEXrF,IAAItB,MAAMO,IAAIC,KAAM2H,YAEtB6B,kBAAoB,SAASvD,GAC3B,GAAIuC,GAAa1E,IAAI2B,cAAcQ,EACnC0D,aAAc,OAASnB,EAAWzB,KAAO,QAGzCU,UAAUpF,UAAYsH,YAGtB3J,MACEiG,SAAUA,GAEZnF,IAAItB,MAAMO,IAAIC,KAAM2H,YAItBL,QAAQsC,QAGRjE,OAAOlC,iBAAgB,QAAU6F","file":"app.min.js","sourcesContent":["var Api = function() {\n  /**\n   * api.js - this file does all the data interaction with the BoomBox API\n   * this is purposely designed to match the API endpoints\n   */\n  var self = this;\n  self.songs = {};\n  self.albums = {};\n  self.artists = {};\n  self.stream = {};\n  self.stream.track = {};\n  self.stream.album = {};\n  self.stream.artist = {};\n\n  self.songs.get = function(opts,callback) {\n    var data = opts;\n    // console.log(\"getting tracks:\", data);\n    lib.ajax(\"/api/v1/track\",data,callback);\n  };\n  /*\n  self.songs.insert = function(opts) {\n    // we may not need to insert tracks through the frontend.\n  };\n  */\n  self.albums.get = function(opts, callback) {\n    var data = opts;\n    lib.ajax(\"/api/v1/album\",data,callback);\n  };\n  self.artists.get = function(opts, callback) {\n    var data = opts;\n    lib.ajax(\"/api/v1/artist\",data,callback);\n  };\n\n  // streaming endpoints\n  self.stream.pause = function(callback) {\n    lib.ajax(\"/api/v1/stream/pause\",{},callback);\n  };\n  self.stream.play = function(type, id, callback) {\n    var allowedStreamTypes = [\"track\",\"album\",\"artist\"];\n    if (allowedStreamTypes.indexOf(type) == -1) {\n      throw \"Stream play type must be one of: \" + allowedStreamTypes;\n    }\n    if (typeof callback !== \"function\") {\n      throw \"Callback is required.\";\n    }\n\n    var apiUrl = \"/api/v1/stream/\" + type + \"/\" + id;\n    lib.ajax(apiUrl,{},callback);\n  };\n  self.next = function(callback) {\n    if (typeof callback !== \"function\") {\n      throw \"Callback is required.\";\n    }\n\n    lib.ajax(\"/api/v1/stream/next\",{},callback);\n  };\n  self.prev = function(callback) {\n    if (typeof callback !== \"function\") {\n      throw \"Callback is required.\";\n    }\n\n    lib.ajax(\"/api/v1/stream/prev\",{},callback);\n  };\n\n  // track streaming endpoints\n  self.stream.track.play = function(id,callback) {\n    self.stream.play(\"track\",id,callback);\n  };\n  self.stream.album.play = function(id,callback) {\n    self.stream.play(\"album\",id,callback);\n  };\n  self.stream.artist.play = function(id,callback) {\n    self.stream.play(\"artist\",id,callback);\n  };\n  self.stream.next = function(callback) {\n    var apiUrl = \"/api/v1/stream/next\";\n    lib.ajax(apiUrl,{},callback);\n  };\n  self.stream.prev = function(callback) {\n    var apiUrl = \"/api/v1/stream/prev\";\n    lib.ajax(apiUrl,{},callback);\n  };\n\n};\nvar api = new Api();\n","// lib.js - this is a short library of useful functions, primarily Ajax.\n\nvar Lib = function() {\n  var self = this;\n\n  this.selectParent = function(el, parentSelector) {\n    /**\n     * selectParent()\n     * similar to jquery's closest() function,\n     * the difference being that we are not chainable.\n     * @param {Node} el - the element which has parents\n     * @param {string} parentSelector - the CSS-style selector which will identify the parents we are searching for\n     * @return {Node|boolean} An HTML node if if matches the parentSelector. Else false.\n     */\n    var matchesSelector = el.matches ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tel.webkitMatchesSelector ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tel.mozMatchesSelector ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tel.msMatchesSelector;\n\n    while (el) {\n\t\t\t// this loop traverses through the element's parent nodes\n\t\t\tif (matchesSelector.call(el, parentSelector)) {\n\t\t\t\t// if it's a match, quit and return true.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tel = el.parentElement;\n    }\n\n    return el;\n  };\n\n  this.template = function(str, data) {\n    /**\n     * template()\n     * do Mustache-style templating on a string.\n     * Note this is SUPER basic. Does not do nesting, loops, conditionals, etc.\n     * Just simple {name}-value replacement.\n     * @param {string} str - the string to search/replace IN\n     * @param {Object} data - a flat object of key/value pairs to insert into the HTML string.\n     * @returns {string} a full HTML with no more {key} blocks unless the corresponding data[key] did not exist.\n     */\n    var retstr = str;\n\n    // loop over all data properties\n    for (var prop in data) {\n      // create a regex searcher for {prop}\n      var regex = new RegExp('\\{'+prop+'\\}','ig');\n      //console.log(\"lib.js/template(): regex\",regex);\n      \n      // update string\n      retstr = retstr.replace(regex,data[prop]);\n    }\n    return retstr;\n  };\n\n  this.toDom = function(str) {\n    /** toDom()\n     * convert a string into a fully build nodeList\n     * @param {string} str - the string of correctly-formatted HTML\n     * @return {NodeList} the HTML list of nodes\n     */\n    var tmp = document.createElement(\"div\");\n    tmp.innerHTML = str;\n    return tmp.childNodes;\n  };\n\n  this.serialize = function(obj) {\n    /**\n     * serialize()\n     * take an object, output a string fit for the querystring.\n     * @param {object} obj - the data object we wish to serialize.\n     * @cite: http://stackoverflow.com/a/1714899/1525594\n    */\n    var str = [];\n    for(var p in obj)\n      if (obj.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n      }\n    return str.join(\"&\");\n  };\n\n  this.ajax = function(url,data,callback,method) {\n    var reqBody = '',\n        reqBoundary,\n        reqMethod = method ? method : \"GET\";//method is GET by default\n        data = data ? data : {}; // data object is empty object by default\n\n    // parameter validation\n    if (!url) { throw \"lib.js/ajax(): Url is required.\"; }\n    if (!callback) { throw \"lib.js/ajax(): Callback is required.\"; }\n\n    var myCallback = function(e) {\n      //console.log(\"lib.js/ajax(): Ajax request completed!\",arguments);\n      callback(e.target.response,e.target);\n    };\n\n    var myRequest = new XMLHttpRequest();\n    myRequest.responseType = \"json\";\n    myRequest.addEventListener(\"load\",myCallback);\n\n    if (reqMethod === \"POST\") {\n      myRequest.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n      reqBody = addFormData();\n    } else if (reqMethod === \"GET\") {\n      url = url + \"?\" + self.serialize(data);\n    }\n\n    // open the connection, send the data\n    myRequest.open(reqMethod,url);\n    myRequest.send(data);\n  };\n\n  return this;\n};\nlib = new Lib();\n","app = {\n  artists: false,\n  albums: false,\n  tracks: false,\n  init: function() {\n    var self = this;\n\n    // open web socket connection\n    app.socket = new WebSocket(\"ws://localhost:8081\");\n    app.socket.onopen = function(ev) {\n      // console.log(\"Socket is open!\", ev);\n    };\n    app.socket.onmessage = function(dat) {\n      var json = JSON.parse(dat.data);\n      console.log(\"received message from websocket connection!\", json);\n\n      // handle app state changes\n      switch(json.type) {\n        case \"playevent\":\n\n          // update the state\n          app.setState(json.playstate);\n\n          // update the footer \"now playing\" info\n          app.foot.update();\n\n          break;\n        default: \n          // who knows\n          break;\n      }\n    };\n\n    // get albums, artists, and tracks from local storage\n    self.loadFromLS();\n\n    // setup event listeners\n    self.controls.prev.addEventListener(\"click\", self.controls.onPrev);\n    self.controls.next.addEventListener(\"click\", self.controls.onNext);\n    self.controls.play.addEventListener(\"click\", self.controls.onPlay);\n    \n    return this;\n  },\n  getAlbumById: function(id) {\n    /**\n     * Searches through locally stored app.albums array\n     * to find the album with this id.\n     * BUG: if app.albums is empty, this function triggers an error.\n     * @param {string} id - musicbrainz id of the album/release\n     * @return {Object|undefined} undefined if not found, else Album object\n     */\n    return app.albums.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  },\n  getArtistById: function(id) {\n    /**\n     * Searches through locally stored app.artists array\n     * to find the artists with this id.\n     * BUG: if app.artists is empty, this function triggers an error.\n     * @param {string} id - musicbrainz id of the artist\n     * @return {Object|undefined} undefined if not found, else Artist object\n     */\n    return app.artists.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  },\n  getTrackById: function(id) {\n    /**\n     * Searches through locally stored app.tracks array\n     * to find the song track with this id.\n     * BUG: if app.tracks is empty, this function triggers an error.\n     * @param {string} id - musicbrainz id of the track\n     * @return {Object|undefined} undefined if not found, else Track object\n     */\n    return app.tracks.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  },\n  loadFromLS: function() {\n    if (typeof window.localStorage !== \"object\") {\n      console.warn(\"Browser does not support local storage.\");\n    } else {\n      if (localStorage.getItem(\"tracks\")) {\n        app.tracks = JSON.parse(localStorage.getItem(\"tracks\"));\n      }\n      if (localStorage.getItem(\"artists\")) {\n        app.artists = JSON.parse(localStorage.getItem(\"artists\"));\n      }\n      if (localStorage.getItem(\"albums\")) {\n        app.albums = JSON.parse(localStorage.getItem(\"albums\"));\n      }\n    }\n  },\n  state: {\n    /**\n     * this object helps keep track of the currently playing song,\n     * albumid, artistid, nextid, previd, play/pause, etc.\n     * @typedef {Object} state\n     * @property {boolean} state.playing - is there a track playing this very second?\n     * @property {(boolean|string)} state.prev - if there is a \"previous\" song in the playlist, its id is stored here. Else false.\n     * @property {(boolean|string)} state.next - if there is a \"next\" song in the playlist, its id is stored here. Else false.\n     *\n     */\n    playing: false,\n    prev: false,\n    next: false\n  },\n  setState: function(state) {\n    /**\n     * knowing the current track in the state,\n     * get the album info and artist info\n     * and insert them into the app.state object.\n     * @param {State} state - the currently playing song\n     * @return {State} state - the UPDATED playing state, with full album info and artist info\n     */\n    app.state = state;\n    app.state.artist = false;\n    app.state.album = false;\n\n    if (app.state.track.artistid && app.artists) {\n      // get the album by id\n      // note, all these albums / artists come from local storage\n      app.state.artist = app.artists.find(function(x) {\n        return x._id === app.state.track.artistid;\n      });\n    }\n\n    if (app.state.track.albumid && app.albums) {\n      // get the album by id\n      // note, all these albums / artists come from local storage\n      app.state.album = app.albums.find(function(x) {\n        return x._id === app.state.track.albumid;\n      });\n    }\n\n    return app.state;\n  }\n};\napp.controls = {\n  /**\n   * app controls\n   * This file manages the \"Now Playing\" bar and app controls\n   * at the bottom of the app.\n   *\n   * The app controls include\n   *    play/pause button,\n   *    previous song button,\n   *    next button\n   *\n   * The \"Now Playing\" bar includes\n   *    track title,\n   *    album title,\n   *    artist title\n  */\n  prev: document.getElementById(\"control__playprev\"),\n  next: document.getElementById(\"control__playnext\"),\n  play: document.getElementById(\"control__playbtn\"),\n  onPrev: function(e) {\n    /**\n     * this function is called by the \"next\" button in the app controls\n     * it is called ONLY by pressing the \"previous\" button\n     * @param {object} e - the event straight from the on(\"click\") listener\n     */\n    e.preventDefault();\n    if (app.state.prev) {\n      // if the API says there is a \"previous\" song that we can play\n      api.stream.prev(app.controls.playResponse);\n    } else {\n      // else error?\n    }\n  },\n  onNext: function(e) {\n    /**\n     * this function is called by the \"next\" button in the app controls\n     * it is called ONLY by pressing the \"next\" button\n     * @param {object} e - the event straight from the on(\"click\") listener\n     */\n    e.preventDefault();\n    if (app.state.next) {\n      // if the API says there is a \"next\" song that we can play\n      api.stream.next(app.controls.playResponse);\n    } else {\n      // else error?\n    }\n  },\n  onPlay: function(e) {\n    /**\n     * this function is called by the \"play\" button in the app controls\n     * it is called ONLY by pressing the play/pause button\n     * it determines whether to\n     * - pause the current song,\n     * - or resume the current song\n     * @param {object} e - the event straight from the on(\"click\") listener\n     */\n    e.preventDefault();\n    api.stream.pause(app.controls.playResponse);\n  },\n  playResponse: function(json) {\n    if (json.error) {\n      console.warn(\"Error, couldn't find item!\",json);\n      alert(\"Error! Could not find item\");\n    } else {\n      console.log(\"playing:\",json);\n\n\n      // open the footer \"now playing\" thing\n      app.foot.open();\n    }\n  }\n};\napp.foot = {\n  trackEl: document.querySelector(\".playing__track__title\"),\n  artistEl: document.querySelector(\".playing__track__artist\"),\n  albumEl: document.querySelector(\".playing__track__album\"),\n  update: function() {\n    /**\n     * fill the footer's \"now playing\" info\n     * using\n     * - app.state.track.title,\n     * - app.state.artist.name, and\n     * - app.state.album.title\n     *\n     * Also, disabled or enables the previous and next buttons\n     * as appropriate, depending on\n     * - app.state.prev !== false and\n     * - app.state.next !== false\n     */\n    var playIcon = app.controls.play.querySelector(\".fa\");\n\n    // update \"now playing\" info\n    app.foot.trackEl.innerHTML = app.state.track.title;\n    app.foot.artistEl.innerHTML = app.state.artist.name;\n    app.foot.albumEl.innerHTML = app.state.album.title;\n\n    // if there is no \"next\" song, disable the button\n    if (!app.state.next) {\n      app.controls.next.classList.add(\"disabled\");\n    } else {\n      app.controls.next.classList.remove(\"disabled\");\n    }\n\n    // if there is no \"previous\" song, disable the button\n    if (!app.state.prev) {\n      app.controls.prev.classList.add(\"disabled\");\n    } else {\n      app.controls.prev.classList.remove(\"disabled\");\n    }\n\n    if (!app.state.playing) {\n      // if paused, show the \"play\" icon\n      playIcon.classList.add(\"fa-play\");\n      playIcon.classList.remove(\"fa-pause\");\n    } else {\n      // if playing, show the \"pause\" icon\n      playIcon.classList.remove(\"fa-play\");\n      playIcon.classList.add(\"fa-pause\");\n    }\n  },\n  open: function() {\n    /**\n     * open the controls / now playing footer\n     * by adding the class .open-footer to the body element.\n     * It's up to the CSS to do something with that class.\n     */\n    document.body.classList.add(\"open-footer\");\n  }\n};\n\napp.init();\n","//main.js - This file does all the app-ish stuff. Includes buttons, animations, and possibly offline functionality.\n\n\n// Buttons!\nvar settingsBtn = document.getElementById(\"btnSettings\"),\n    searchBtn = document.getElementById(\"btnSearch\"),\n    songTab = document.getElementById(\"tab__songs\"),\n    artistTab = document.getElementById(\"tab__artists\"),\n    albumTab = document.getElementById(\"tab__albums\"),\n    statusBar = document.getElementById(\"app-statusbar\");\n\n// the \"Songs\" tab in the app nav\nvar songTabClick = function(e) {\n  /**\n   * Deal with someone clicking the song tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.tracks) {\n    // get all songs\n    api.songs.get({},loadSongs);\n  } else {\n    loadSongs(app.tracks);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  albumTab.classList.remove(\"active\");\n  artistTab.classList.remove(\"active\");\n  songTab.classList.add(\"active\");\n};\n\n// the \"Albums\" tab in the app nav\nvar albumTabClick = function(e) {\n  /**\n   * Deal with someone clicking the album tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.albums) {\n    // get all songs\n    api.albums.get({},loadAlbums);\n  } else {\n    loadAlbums(app.albums);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  songTab.classList.remove(\"active\");\n  artistTab.classList.remove(\"active\");\n  albumTab.classList.add(\"active\");\n};\n\n// the \"Artists\" tab in the app nav\nvar artistTabClick = function(e) {\n  /**\n   * Deal with someone clicking the album tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.artists) {\n    // get all songs\n    api.artists.get({},loadArtists);\n  } else {\n    loadArtists(app.artists);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  songTab.classList.remove(\"active\");\n  albumTab.classList.remove(\"active\");\n  artistTab.classList.add(\"active\");\n};\n\n// Data\n// here we set up the loading of song lists, album lists, artist lists, etc.\nvar dataBox = document.getElementById(\"app-data\");\n\nvar openSettings = function() {\n  document.getElementById(\"app-settings\").classList.toggle(\"open\");\n};\n\n\n// events\n// here we set up all the button click events\nsettingsBtn.addEventListener(\"click\",openSettings);\nsongTab.addEventListener(\"click\", songTabClick);\nalbumTab.addEventListener(\"click\", albumTabClick);\nartistTab.addEventListener(\"click\", artistTabClick);\ndocument.getElementById(\"clear__cache\").addEventListener(\"click\", function(e) {\n  if (typeof window.localStorage !== \"undefined\") {\n    // we later may want to clear just app.tracks, app.albums, and app.artists, for example\n    app.albums = false;\n    app.artists = false;\n    app.tracks = false;\n    window.localStorage.clear();\n  }\n  e.preventDefault();\n});\n\n// Get songs\nvar loadSongs = function(json) {\n  var songTemplate = '<div class=\"list-item\" id=\"{_id}\" data-type=\"track\"><div class=\"track__info\"><h4 class=\"title\">{title}</h4><h5 class=\"artist__name\">{artistname}</h5></div><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.tracks = json;\n\n  // for each song, append the artist name\n  if (!json[0].artistname && app.artists.length) {\n    for (var i=0; i < json.length; i++) {\n      // for each stored artist, check the id against the current track.artistid\n      thisArtist = app.getArtistById(json[i].artistid);\n      if (thisArtist) {\n        json[i].artistname = thisArtist.name;\n      }\n    }\n  }\n\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"tracks\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadArtists = function(json) {\n  var songTemplate = '<div class=\"list-item item__artist\" id=\"{_id}\" data-type=\"artist\"><h4 class=\"title\">{name}</h4><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.artists = json;\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"artists\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadAlbums = function(json) {\n  var songTemplate = '<div class=\"list-item item__album\" id=\"{_id}\" data-type=\"album\"><h4 class=\"title\">{title}</h4><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.albums = json;\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"albums\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadItems = function(json, mediaTemplate) {\n  dataBox.innerHTML = '';\n\n  // insert into page\n  for (var i=0;i<json.length;i++) {\n    // use our new template function in the library\n    var song = lib.toDom(lib.template(mediaTemplate,json[i]));\n    dataBox.appendChild(song[0]);\n    \n    var curSong = new mediaItem(document.getElementById(json[i]._id));\n  }\n};\n\n//This object does all the stuff with the song divs.\nvar mediaItem = function(item) {\n  var self = this,\n      playbutton = item.querySelector(\".fa\");\n\n  this.clearBtns = function() {\n    var curPlayingSongBtn = document.querySelector(\".fa.fa-pause\");\n    if (curPlayingSongBtn) {\n      curPlayingSongBtn.classList.remove(\"fa-pause\");\n      curPlayingSongBtn.classList.add(\"fa-play\");\n    }\n  };\n\n  this.play = function(e) {\n    self.clearBtns();\n    item.classList.add(\"active\");\n    playbutton.classList.remove(\"fa-play\");\n    playbutton.classList.add(\"fa-pause\");\n\n    // play the particular type of media\n    switch(item.dataset.type) {\n      case \"album\":\n        // play all the songs in the album\n        api.stream.album.play(item.id, app.controls.playResponse);\n        break;\n      case \"artist\":\n        // play all the songs for the particular artist\n        api.stream.artist.play(item.id, app.controls.playResponse);\n        break;\n      case \"track\":\n        // play this particular song\n        api.stream.track.play(item.id, app.controls.playResponse);\n        break;\n    }\n  };\n\n\n  this.pause = function(e) {\n    item.classList.remove(\"active\");\n    playbutton.classList.add(\"fa-play\");\n    playbutton.classList.remove(\"fa-pause\");\n    api.pause(item.id, function() {\n      console.log(\"Whoa... it's paused!?\",arguments);\n    });\n  };\n\n  this.toggle = function(e) {\n    if (item.classList.contains(\"active\")) {//then song is being played right now.\n      self.pause(e);\n    } else {//else song is currently paused. play it!\n      self.play(e);\n    }\n  };\n\n  // setup the play/pause button event listener\n  item.querySelector(\".playBtn\").addEventListener(\"click\",self.toggle);\n\n  return this;\n};\nvar loadSongsByX = function(e) {\n  var item, opts,\n      album = lib.selectParent(e.target, \".item__album\"),\n      artist = lib.selectParent(e.target, \".item__artist\");\n\n  if (album) {\n    //console.log(\"found album:\", album);\n\t\tif (album) {\n      loadSongsByAlbum(album.id);\n    }\n  } else if (artist) {\n    //console.log(\"found artist:\", artist);\n\t\tif (artist) {\n      loadSongsByArtist(artist.id);\n    }\n\t}\n};\nloadSongsByAlbum = function(albumid) {\n  var thisAlbum = app.getAlbumById(albumid),\n      statusTemplate = \"<h2>{album}</h2><h4>by {artist}</h4>\",\n      dat = {\n        album: thisAlbum.title,\n        artist: app.getArtistById(thisAlbum.artistid).name\n      };\n\n  // put album name in status bar\n  statusBar.innerHTML = lib.template(statusTemplate, dat);\n\n  // query for songs by album ID\n  opts = {\n    albumid: albumid\n  };\n  api.songs.get(opts, loadSongs);\n};\nloadSongsByArtist = function(artistid) {\n  var thisArtist = app.getArtistById(artistid);\n  artistTitle = '<h2>' + thisArtist.name + '</h2>';\n\n  // put artist name in status bar\n  statusBar.innerHTML = artistTitle;\n\n  // query for songs by artist ID\n  opts = {\n    artistid: artistid\n  };\n  api.songs.get(opts, loadSongs);\n};\n\n// on initial page load, show all the songs\nsongTab.click();\n\n// window event listeners - listen for clicks on the non-existent album or artist divs\nwindow.addEventListener(\"click\", loadSongsByX);\n"]}