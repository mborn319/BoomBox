{"version":3,"sources":["../../js/api.js","../../js/lib.js","../../js/app.js","../../js/main.js"],"names":["ApiInterface","self","this","getTracks","opts","callback","data","lib","ajax","insertTracks","track","getAlbums","getArtists","pauseStream","playStream","type","id","allowedStreamTypes","indexOf","apiUrl","playTrack","playAlbum","playArtist","playNext","playPrev","api","Lib","selectParent","el","parentSelector","matchesSelector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","call","parentElement","template","str","retstr","prop","regex","RegExp","replace","toDom","tmp","document","createElement","innerHTML","childNodes","serialize","obj","p","hasOwnProperty","push","encodeURIComponent","join","url","method","reqBody","reqMethod","myCallback","e","target","response","myRequest","XMLHttpRequest","responseType","addEventListener","setRequestHeader","addFormData","open","send","App","artists","albums","tracks","controls","foot","init","socket","WebSocket","location","host","onopen","ev","console","log","onmessage","dat","json","JSON","parse","playstate","toggleIcon","_id","playing","album","artist","setState","update","loadFromLS","prev","onPrev","next","onNext","play","onPlay","getAlbumById","find","item","getArtistById","getTrackById","window","localStorage","warn","getItem","state","artistid","x","albumid","getElementById","preventDefault","playResponse","error","alert","itemId","showPause","icon","querySelector","classList","remove","add","trackEl","artistEl","albumEl","playIcon","title","name","body","close","app","settingsBtn","searchBtn","songTab","artistTab","albumTab","statusBar","songTabClick","loadSongs","albumTabClick","loadAlbums","artistTabClick","loadArtists","dataBox","openSettings","toggle","clear","songTemplate","artistname","length","i","thisArtist","setItem","stringify","loadItems","mediaTemplate","song","appendChild","mediaItem","clearBtns","curPlayingSongBtn","dataset","pause","arguments","contains","loadSongsByX","loadSongsByAlbum","loadSongsByArtist","thisAlbum","statusTemplate","artistTitle","click"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * create a new clientside API object\n * @class\n * @classdesc this file does all the data interaction with the BoomBox API\n *            this is purposely designed to match the API endpoints\n */\nvar ApiInterface = function() {\n  /**\n   * @typedef {Object} searchOpts\n   * @property {string} id - the unique musicbrainz id of the single\n   * item you wish to retrieve\n   * @property {number} limit - max number of items to retrieve\n   * @property {number} page - get items starting at number ((page-1)*limit)+1\n   * @property {string} search - search phrase to find in item name or title\n   */\n\n  /**\n   * returns the result of the AJAX http request.\n   * Entire AJAX request is included in callback.\n   * @callback getCallback\n   * @param {Object} HTTP response\n   */\n\n  var self = this;\n\n  /**\n   * get songs from server\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   * @see Api#getTracks\n   */\n  this.getTracks = function(opts,callback) {\n    var data = opts;\n    // console.log(\"getting tracks:\", data);\n    lib.ajax(\"/api/v1/track\",data,callback);\n  };\n\n  /**\n   * Send a new track to the server\n   * @param {Track}\n   * @param {insertResponse} callback - callback receives result of the insert attempt\n   * @see Api#insertTracks\n   */\n  this.insertTracks = function(track) {\n    // we may eventually need to insert tracks through the frontend.\n  };\n\n  /**\n   * get albums from server by id,search phrase, etc.\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   * @see Api#getAlbums\n   */\n  this.getAlbums = function(opts, callback) {\n    var data = opts;\n    lib.ajax(\"/api/v1/album\",data,callback);\n  };\n\n  /**\n   * get artists from server by id,search phrase, etc.\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   * @see API#getArtists\n   */\n  this.getArtists = function(opts, callback) {\n    var data = opts;\n    lib.ajax(\"/api/v1/artist\",data,callback);\n  };\n\n  // streaming endpoints\n  /**\n   * pause the currently playing item\n   * @param {pauseResponse} callback - response given when pausing an item\n   * @see Playlist#pause\n   */\n  this.pauseStream = function(callback) {\n    lib.ajax(\"/api/v1/stream/pause\",{},callback);\n  };\n\n  /**\n   * play a track, artist, or album by ID\n   * @param {string} type - one of \"track\",\"album\",\"artist\"\n   * @param {string} id - unique ID of the item to play\n   * @param {playResponse} callback - result of the play action\n   * @see Playlist#play\n   */\n  this.playStream = function(type, id, callback) {\n    var allowedStreamTypes = [\"track\",\"album\",\"artist\"];\n    if (allowedStreamTypes.indexOf(type) == -1) {\n      throw \"Stream play type must be one of: \" + allowedStreamTypes;\n    }\n    if (typeof callback !== \"function\") {\n      throw \"Callback is required.\";\n    }\n\n    var apiUrl = \"/api/v1/stream/\" + type + \"/\" + id;\n    lib.ajax(apiUrl,{},callback);\n  };\n\n  /**\n   * play a certain track, given its id\n   * @param {string} id - the unique id of the track we wish to play\n   * @param {playResponse} callback - result of the play action\n   * @see Playlist#play\n   */\n  this.playTrack = function(id,callback) {\n    self.playStream(\"track\",id,callback);\n  };\n\n  /**\n   * play a certain album, given its id\n   * @param {string} id - the unique id of the album we wish to listen to\n   * @param {playResponse} callback - result of the play action\n   * @see Playlist#play\n   */\n  this.playAlbum = function(id,callback) {\n    self.playStream(\"album\",id,callback);\n  };\n\n  /**\n   * play all songs by a certain artist, given its id\n   * @param {string} id - the unique id of the artist we wish to listen to\n   * @param {playResponse} callback - result of the play action\n   * @see Playlist#play\n   */\n  this.playArtist = function(id,callback) {\n    self.playStream(\"artist\",id,callback);\n  };\n\n  /**\n   * Skip to the next song in the pre-computed playlist.\n   * The playlist is reset when\n   *  - user clicks \"play\" button on a track,\n   *  - user clicks \"play\" buton on an artist,\n   *  - user clicks \"play\" button on an album.\n   *  For any of these, if the item was already playing, but paused, it would not regenerate the playlist.\n   * @param {playResponse}\n   * @see Playlist#next\n   */\n  this.playNext = function(callback) {\n    var apiUrl = \"/api/v1/stream/next\";\n    lib.ajax(apiUrl,{},callback);\n  };\n\n  /**\n   * play the previous song in the pre-computed playlist.\n   * Unlike most \"previous\" buttons, does not restart the given song if already playing.\n   * @param {playResponse}\n   * @see Playlist#prev\n   */\n  this.playPrev = function(callback) {\n    var apiUrl = \"/api/v1/stream/prev\";\n    lib.ajax(apiUrl,{},callback);\n  };\n\n};\n\n// instantiate it, put in a global var\nvar api = new ApiInterface();\n","/**\n * create a new clientside Lib object\n * @class\n * @classdesc this is a short library of useful functions, primarily Ajax.\n */\nvar Lib = function() {\n  var self = this;\n\n  /**\n   * selectParent()\n   * similar to jquery's closest() function,\n   * the difference being that we are not chainable.\n   * @param {Node} el - the element which has parents\n   * @param {string} parentSelector - the CSS-style selector which will identify the parents we are searching for\n   * @return {Node|boolean} An HTML node if if matches the parentSelector. Else false.\n   */\n  this.selectParent = function(el, parentSelector) {\n    var matchesSelector = el.matches ||\n                          el.webkitMatchesSelector ||\n                          el.mozMatchesSelector ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tel.msMatchesSelector;\n\n    while (el) {\n\t\t\t// this loop traverses through the element's parent nodes\n\t\t\tif (matchesSelector.call(el, parentSelector)) {\n\t\t\t\t// if it's a match, quit and return true.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tel = el.parentElement;\n    }\n\n    return el;\n  };\n\n  /**\n   * template()\n   * do Mustache-style templating on a string.\n   * Note this is SUPER basic. Does not do nesting, loops, conditionals, etc.\n   * Just simple {name}-value replacement.\n   * @param {string} str - the string to search/replace IN\n   * @param {Object} data - a flat object of key/value pairs to insert into the HTML string.\n   * @returns {string} a full HTML with no more {key} blocks unless the corresponding data[key] did not exist.\n   */\n  this.template = function(str, data) {\n    var retstr = str;\n\n    // loop over all data properties\n    for (var prop in data) {\n      // create a regex searcher for {prop}\n      var regex = new RegExp('\\{'+prop+'\\}','ig');\n      //console.log(\"lib.js/template(): regex\",regex);\n      \n      // update string\n      retstr = retstr.replace(regex,data[prop]);\n    }\n    return retstr;\n  };\n\n  /** toDom()\n   * convert a string into a fully build nodeList\n   * @param {string} str - the string of correctly-formatted HTML\n   * @return {NodeList} the HTML list of nodes\n   */\n  this.toDom = function(str) {\n    var tmp = document.createElement(\"div\");\n    tmp.innerHTML = str;\n    return tmp.childNodes;\n  };\n\n  /**\n   * serialize()\n   * take an object, output a string fit for the querystring.\n   * @param {object} obj - the data object we wish to serialize.\n   * @cite: http://stackoverflow.com/a/1714899/1525594\n  */\n  this.serialize = function(obj) {\n    var str = [];\n    for(var p in obj)\n      if (obj.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n      }\n    return str.join(\"&\");\n  };\n\n  /**\n   * a native Javascript ajax function.\n   * Wraps XMLHttpRequest() with a url, data object, and a nice little callback.\n   * @param {string} url - HTTP url to send request to\n   * @param {Object} data - key/value pairs of GET or POST-type values to send\n   * @param {ajaxResponse} callback - gets called with response from request\n   * @param {string} method - one of \"GET\" or \"POST\"\n   */\n  this.ajax = function(url,data,callback,method) {\n    var reqBody = '',\n        reqBoundary,\n        reqMethod = method ? method : \"GET\";//method is GET by default\n        data = data ? data : {}; // data object is empty object by default\n\n    // parameter validation\n    if (!url) { throw \"lib.js/ajax(): Url is required.\"; }\n    if (!callback) { throw \"lib.js/ajax(): Callback is required.\"; }\n\n    var myCallback = function(e) {\n      //console.log(\"lib.js/ajax(): Ajax request completed!\",arguments);\n      callback(e.target.response,e.target);\n    };\n\n    var myRequest = new XMLHttpRequest();\n    myRequest.responseType = \"json\";\n    myRequest.addEventListener(\"load\",myCallback);\n\n    if (reqMethod === \"POST\") {\n      myRequest.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n      reqBody = addFormData();\n    } else if (reqMethod === \"GET\") {\n      url = url + \"?\" + self.serialize(data);\n    }\n\n    // open the connection, send the data\n    myRequest.open(reqMethod,url);\n    myRequest.send(data);\n  };\n\n  return this;\n};\n\n// instantiate it, put in a global var\nlib = new Lib();\n","/**\n * create a new clientside App object.\n * @class\n * @classdesc The remote control web app for Boombox.\n *            basically all the app-ish type stuff.\n *            buttons, footer controls, etc.\n */\nApp = function() {\n  var self = this;\n\n  this.artists = false;\n  this.albums = false;\n  this.tracks = false;\n  this.controls = {};\n  this.foot = {};\n\n  /**\n   * More or less a \"setup\" function.\n   * Starts the web socket, sets up a few event listeners.\n   * @return {Api}\n   */\n  this.init = function() {\n    var self = this;\n\n    // open web socket connection\n    self.socket = new WebSocket(\"wss://\" + location.host);\n    self.socket.onopen = function(ev) {\n      console.log(\"Socket is open!\", ev);\n    };\n    self.socket.onmessage = function(dat) {\n      var json = JSON.parse(dat.data);\n      console.log(\"received message from websocket connection!\", json);\n\n      // handle app state changes\n      switch(json.type) {\n        case \"playevent\":\n\n          if (typeof json.playstate.track !== \"undefined\") {\n            // show the track icon as \"playing\" or paused\n            // depending on the playstate.playing==true or false, respectively\n            self.toggleIcon(json.playstate.track._id, json.playstate.playing);\n          }\n\n          if (typeof json.playstate.album !== \"undefined\") {\n            // show the album icon as \"playing\" or paused\n            self.toggleIcon(json.playstate.album._id, json.playstate.playing);\n          }\n\n          if (typeof json.playstate.artist !== \"undefined\") {\n            // show the artist icon as \"playing\" or paused\n            self.toggleIcon(json.playstate.artist._id, json.playstate.playing);\n          }\n\n          // update the state\n          self.setState(json.playstate);\n\n          // update the footer \"now playing\" info\n          self.foot.update();\n\n          // if currently playing, open footer\n          if (json.playstate.playing) {\n            self.foot.open();\n          }\n\n          break;\n        default:\n          // who knows\n          break;\n      }\n    };\n\n    // get albums, artists, and tracks from local storage\n    self.loadFromLS();\n\n    // setup event listeners\n    self.controls.prev.addEventListener(\"click\", self.controls.onPrev);\n    self.controls.next.addEventListener(\"click\", self.controls.onNext);\n    self.controls.play.addEventListener(\"click\", self.controls.onPlay);\n  };\n\n  /**\n   * Searches through locally stored app.albums array\n   * to find the album with this id.\n   * BUG: if app.albums is empty, this function triggers an error.\n   * @param {string} id - musicbrainz id of the album/release\n   * @return {Object|undefined} undefined if not found, else Album object\n   */\n  this.getAlbumById = function(id) {\n    return self.albums.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  };\n\n  /**\n   * Searches through locally stored app.artists array\n   * to find the artists with this id.\n   * BUG: if app.artists is empty, this function triggers an error.\n   * @param {string} id - musicbrainz id of the artist\n   * @return {Object|undefined} undefined if not found, else Artist object\n   */\n  this.getArtistById = function(id) {\n    return self.artists.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  };\n\n  /**\n   * Searches through locally stored app.tracks array\n   * to find the song track with this id.\n   * BUG: if app.tracks is empty, this function triggers an error.\n   * @param {string} id - musicbrainz id of the track\n   * @return {Object|undefined} undefined if not found, else Track object\n   */\n  this.getTrackById = function(id) {\n    return self.tracks.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  };\n\n  /**\n   * load app data from local storage.\n   * This is WAY faster than a network request!\n   * Works offline too.\n   */\n  this.loadFromLS = function() {\n    if (typeof window.localStorage !== \"object\") {\n      console.warn(\"Browser does not support local storage.\");\n    } else {\n      if (localStorage.getItem(\"tracks\")) {\n        self.tracks = JSON.parse(localStorage.getItem(\"tracks\"));\n      }\n      if (localStorage.getItem(\"artists\")) {\n        self.artists = JSON.parse(localStorage.getItem(\"artists\"));\n      }\n      if (localStorage.getItem(\"albums\")) {\n        self.albums = JSON.parse(localStorage.getItem(\"albums\"));\n      }\n    }\n  };\n\n  /**\n   * this object helps keep track of the currently playing song,\n   * albumid, artistid, nextid, previd, play/pause, etc.\n   * @typedef {Object} state\n   * @property {boolean} state.playing - is there a track playing this very second?\n   * @property {(boolean|string)} state.prev - if there is a \"previous\" song in the playlist, its id is stored here. Else false.\n   * @property {(boolean|string)} state.next - if there is a \"next\" song in the playlist, its id is stored here. Else false.\n   *\n   */\n  this.state = {\n    playing: false,\n    prev: false,\n    next: false\n  };\n\n  /**\n   * knowing the current track in the state,\n   * get the album info and artist info\n   * and insert them into the self.state object.\n   * @param {State} state - the currently playing song\n   * @return {State} state - the UPDATED playing state, with full album info and artist info\n   */\n  this.setState = function(state) {\n    self.state = state;\n    self.state.artist = false;\n    self.state.album = false;\n\n    if (self.state.track.artistid && self.artists) {\n      // get the album by id\n      // note, all these albums / artists come from local storage\n      self.state.artist = self.artists.find(function(x) {\n        return x._id === self.state.track.artistid;\n      });\n    }\n\n    if (self.state.track.albumid && self.albums) {\n      // get the album by id\n      // note, all these albums / artists come from local storage\n      self.state.album = self.albums.find(function(x) {\n        return x._id === self.state.track.albumid;\n      });\n    }\n\n    return self.state;\n  };\n\n  /**\n   * app controls\n   * This file manages the \"Now Playing\" bar and app controls\n   * at the bottom of the app.\n   *\n   * The app controls include\n   *    play/pause button,\n   *    previous song button,\n   *    next button\n   *\n   * The \"Now Playing\" bar includes\n   *    track title,\n   *    album title,\n   *    artist title\n  */\n  this.controls.prev = document.getElementById(\"control__playprev\");\n  this.controls.next = document.getElementById(\"control__playnext\");\n  this.controls.play = document.getElementById(\"control__playbtn\");\n\n  /**\n   * this function is called by the \"play\" button in the app controls\n   * it is called ONLY by pressing the play/pause button\n   * it determines whether to\n   * - pause the current song,\n   * - or resume the current song\n   * @param {object} e - the event straight from the on(\"click\") listener\n   */\n  this.controls.onPlay = function(e) {\n    e.preventDefault();\n    if(!self.state.playing) {\n      api.playTrack(self.state.track._id, self.controls.playResponse);\n    } else {\n      api.pauseStream(self.controls.playResponse);\n    }\n  };\n\n  /**\n   * @todo write documentation\n   */\n  this.controls.playResponse = function(json) {\n    if (json.error) {\n      console.warn(\"Error, couldn't find item!\",json);\n      alert(\"Error! Could not find item\");\n    } else {\n      console.log(\"playing:\",json);\n\n      // open the footer \"now playing\" thing\n      self.foot.open();\n    }\n  };\n\n  /*\n   * toggleIcon()\n   * find the \"play\" button for the now playing item\n   * (whether track, artist or album)\n   * and switch the icon to \"pause\"\n   * @param {string} itemId - track, artist or album id\n   * @param {boolean} showPause - if true, shows \"pause\" icon, else shows \"play\" icon.\n   * @returns {boolean} itemExists - true if div[itemId] exists, else false\n   */\n  this.toggleIcon = function(itemId, showPause) {\n    var icon,\n        item = document.getElementById(itemId);\n\n    if (item) {\n      icon = item.querySelector(\".fa\");\n      if (icon) {\n        if (showPause) {\n          icon.classList.remove(\"fa-play\");\n          icon.classList.add(\"fa-pause\");\n        } else {\n          icon.classList.remove(\"fa-pause\");\n          icon.classList.add(\"fa-play\");\n        }\n      }\n    }\n\n    //return boolean item, NOT truthy item!\n    return !!item && !!icon;\n  };\n\n\n  /**\n   * this function is called by the \"next\" button in the app controls\n   * it is called ONLY by pressing the \"previous\" button\n   * @param {object} e - the event straight from the on(\"click\") listener\n   */\n  this.controls.onPrev = function(e) {\n    e.preventDefault();\n    if (self.state.prev) {\n      // if the API says there is a \"previous\" song that we can play\n      api.playPrev(self.controls.playResponse);\n    } else {\n      // else error?\n    }\n  };\n\n  /**\n   * this function is called by the \"next\" button in the app controls\n   * it is called ONLY by pressing the \"next\" button\n   * @param {object} e - the event straight from the on(\"click\") listener\n   */\n  this.controls.onNext = function(e) {\n    e.preventDefault();\n    if (self.state.next) {\n      // if the API says there is a \"next\" song that we can play\n      api.playNext(self.controls.playResponse);\n    } else {\n      // else error?\n    }\n  };\n\n\n  // App footer\n  this.foot.trackEl = document.querySelector(\".playing__track__title\");\n  this.foot.artistEl = document.querySelector(\".playing__track__artist\");\n  this.foot.albumEl = document.querySelector(\".playing__track__album\");\n\n  /**\n   * fill the footer's \"now playing\" info\n   * using\n   * - app.state.track.title,\n   * - app.state.artist.name, and\n   * - app.state.album.title\n   *\n   * Also, disabled or enables the previous and next buttons\n   * as appropriate, depending on\n   * - app.state.prev !== false and\n   * - app.state.next !== false\n   */\n  this.foot.update = function() {\n    var playIcon = self.controls.play.querySelector(\".fa\");\n\n    // update \"now playing\" info\n    self.foot.trackEl.innerHTML = self.state.track.title;\n    self.foot.artistEl.innerHTML = self.state.artist.name;\n    self.foot.albumEl.innerHTML = self.state.album.title;\n\n    // if there is no \"next\" song, disable the button\n    if (!self.state.next) {\n      self.controls.next.classList.add(\"disabled\");\n    } else {\n      self.controls.next.classList.remove(\"disabled\");\n    }\n\n    // if there is no \"previous\" song, disable the button\n    if (!self.state.prev) {\n      self.controls.prev.classList.add(\"disabled\");\n    } else {\n      self.controls.prev.classList.remove(\"disabled\");\n    }\n\n    if (!self.state.playing) {\n      // if paused, show the \"play\" icon\n      playIcon.classList.add(\"fa-play\");\n      playIcon.classList.remove(\"fa-pause\");\n    } else {\n      // if playing, show the \"pause\" icon\n      playIcon.classList.remove(\"fa-play\");\n      playIcon.classList.add(\"fa-pause\");\n    }\n  };\n\n  /**\n   * open the controls / now playing footer\n   * by adding the class .open-footer to the body element.\n   * It's up to the CSS to do something with that class.\n   */\n  this.foot.open = function() {\n    document.body.classList.add(\"open-footer\");\n  };\n\n  /**\n   * close the now playing footer, typically when the music pauses\n   * by adding the class .open-footer to the body element.\n   * It's up to the CSS to do something with that class.\n   */\n  this.foot.close = function() {\n    document.body.classList.remove(\"open-footer\");\n  };\n\n  // call init to set up the footer\n  this.init();\n};\n\nvar app = new App();\n","//main.js - This file does all the app-ish stuff. Includes buttons, animations, and possibly offline functionality.\n\n\n// Buttons!\nvar settingsBtn = document.getElementById(\"btnSettings\"),\n    searchBtn = document.getElementById(\"btnSearch\"),\n    songTab = document.getElementById(\"tab__songs\"),\n    artistTab = document.getElementById(\"tab__artists\"),\n    albumTab = document.getElementById(\"tab__albums\"),\n    statusBar = document.getElementById(\"app-statusbar\");\n\n// the \"Songs\" tab in the app nav\nvar songTabClick = function(e) {\n  /**\n   * Deal with someone clicking the song tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.tracks) {\n    // get all songs\n    api.getTracks({},loadSongs);\n  } else {\n    loadSongs(app.tracks);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  albumTab.classList.remove(\"active\");\n  artistTab.classList.remove(\"active\");\n  songTab.classList.add(\"active\");\n};\n\n// the \"Albums\" tab in the app nav\nvar albumTabClick = function(e) {\n  /**\n   * Deal with someone clicking the album tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.albums) {\n    // get all songs\n    api.getAlbums({},loadAlbums);\n  } else {\n    loadAlbums(app.albums);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  songTab.classList.remove(\"active\");\n  artistTab.classList.remove(\"active\");\n  albumTab.classList.add(\"active\");\n};\n\n// the \"Artists\" tab in the app nav\nvar artistTabClick = function(e) {\n  /**\n   * Deal with someone clicking the album tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.artists) {\n    // get all songs\n    api.getArtists({},loadArtists);\n  } else {\n    loadArtists(app.artists);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  songTab.classList.remove(\"active\");\n  albumTab.classList.remove(\"active\");\n  artistTab.classList.add(\"active\");\n};\n\n// Data\n// here we set up the loading of song lists, album lists, artist lists, etc.\nvar dataBox = document.getElementById(\"app-data\");\n\nvar openSettings = function() {\n  document.getElementById(\"app-settings\").classList.toggle(\"open\");\n};\n\n\n// events\n// here we set up all the button click events\nsettingsBtn.addEventListener(\"click\",openSettings);\nsongTab.addEventListener(\"click\", songTabClick);\nalbumTab.addEventListener(\"click\", albumTabClick);\nartistTab.addEventListener(\"click\", artistTabClick);\ndocument.getElementById(\"clear__cache\").addEventListener(\"click\", function(e) {\n  if (typeof window.localStorage !== \"undefined\") {\n    // we later may want to clear just app.tracks, app.albums, and app.artists, for example\n    app.albums = false;\n    app.artists = false;\n    app.tracks = false;\n    window.localStorage.clear();\n  }\n  e.preventDefault();\n});\n\n// Get songs\nvar loadSongs = function(json) {\n  var songTemplate = '<div class=\"list-item\" id=\"{_id}\" data-type=\"track\"><div class=\"track__info\"><h4 class=\"title\">{title}</h4><h5 class=\"artist__name\">{artistname}</h5></div><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.tracks = json;\n\n  // for each song, append the artist name\n  if (!json[0].artistname && app.artists.length) {\n    for (var i=0; i < json.length; i++) {\n      // for each stored artist, check the id against the current track.artistid\n      thisArtist = app.getArtistById(json[i].artistid);\n      if (thisArtist) {\n        json[i].artistname = thisArtist.name;\n      }\n    }\n  }\n\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"tracks\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadArtists = function(json) {\n  var songTemplate = '<div class=\"list-item item__artist\" id=\"{_id}\" data-type=\"artist\"><h4 class=\"title\">{name}</h4><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.artists = json;\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"artists\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadAlbums = function(json) {\n  var songTemplate = '<div class=\"list-item item__album\" id=\"{_id}\" data-type=\"album\"><h4 class=\"title\">{title}</h4><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.albums = json;\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"albums\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadItems = function(json, mediaTemplate) {\n  dataBox.innerHTML = '';\n\n  // insert into page\n  for (var i=0;i<json.length;i++) {\n    // use our new template function in the library\n    var song = lib.toDom(lib.template(mediaTemplate,json[i]));\n    dataBox.appendChild(song[0]);\n    \n    var curSong = new mediaItem(document.getElementById(json[i]._id));\n  }\n};\n\n//This object does all the stuff with the song divs.\nvar mediaItem = function(item) {\n  var self = this,\n      playbutton = item.querySelector(\".fa\");\n\n  this.clearBtns = function() {\n    var curPlayingSongBtn = document.querySelector(\".fa.fa-pause\");\n    if (curPlayingSongBtn) {\n      curPlayingSongBtn.classList.remove(\"fa-pause\");\n      curPlayingSongBtn.classList.add(\"fa-play\");\n    }\n  };\n\n  this.play = function(e) {\n    self.clearBtns();\n    item.classList.add(\"active\");\n    // commented these out because it's better to do this retroactively from the server - \n    // more accurate that way.\n    // playbutton.classList.remove(\"fa-play\");\n    // playbutton.classList.add(\"fa-pause\");\n\n    // play the particular type of media\n    switch(item.dataset.type) {\n      case \"album\":\n        // play all the songs in the album\n        api.playAlbum(item.id, app.controls.playResponse);\n        break;\n      case \"artist\":\n        // play all the songs for the particular artist\n        api.playArtist(item.id, app.controls.playResponse);\n        break;\n      case \"track\":\n        // play this particular song\n        api.playTrack(item.id, app.controls.playResponse);\n        break;\n    }\n  };\n\n\n  this.pause = function(e) {\n    item.classList.remove(\"active\");\n    // playbutton.classList.add(\"fa-play\");\n    // playbutton.classList.remove(\"fa-pause\");\n    api.pauseStream(item.id, function() {\n      console.log(\"Whoa... it's paused!?\",arguments);\n    });\n  };\n\n  this.toggle = function(e) {\n    if (item.classList.contains(\"active\")) {//then song is being played right now.\n      self.pause(e);\n    } else {//else song is currently paused. play it!\n      self.play(e);\n    }\n  };\n\n  // setup the play/pause button event listener\n  item.querySelector(\".playBtn\").addEventListener(\"click\",self.toggle);\n\n  return this;\n};\nvar loadSongsByX = function(e) {\n  var item, opts,\n      album = lib.selectParent(e.target, \".item__album\"),\n      artist = lib.selectParent(e.target, \".item__artist\");\n\n  if (album) {\n    //console.log(\"found album:\", album);\n\t\tif (album) {\n      loadSongsByAlbum(album.id);\n    }\n  } else if (artist) {\n    //console.log(\"found artist:\", artist);\n\t\tif (artist) {\n      loadSongsByArtist(artist.id);\n    }\n\t}\n};\nloadSongsByAlbum = function(albumid) {\n  var thisAlbum = app.getAlbumById(albumid),\n      statusTemplate = \"<h2>{album}</h2><h4>by {artist}</h4>\",\n      dat = {\n        album: thisAlbum.title,\n        artist: app.getArtistById(thisAlbum.artistid).name\n      };\n\n  // put album name in status bar\n  statusBar.innerHTML = lib.template(statusTemplate, dat);\n\n  // query for songs by album ID\n  opts = {\n    albumid: albumid\n  };\n  api.getTracks(opts, loadSongs);\n};\nloadSongsByArtist = function(artistid) {\n  var thisArtist = app.getArtistById(artistid);\n  artistTitle = '<h2>' + thisArtist.name + '</h2>';\n\n  // put artist name in status bar\n  statusBar.innerHTML = artistTitle;\n\n  // query for songs by artist ID\n  opts = {\n    artistid: artistid\n  };\n  api.getTracks(opts, loadSongs);\n};\n\n// on initial page load, show all the songs\nsongTab.click();\n\n// window event listeners - listen for clicks on the non-existent album or artist divs\nwindow.addEventListener(\"click\", loadSongsByX);\n"]}