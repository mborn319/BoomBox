{"version":3,"sources":["../../js/api.js","../../js/lib.js","../../js/app.js","../../js/main.js"],"names":["ApiInterface","self","this","songs","albums","artists","stream","track","album","artist","getTracks","opts","callback","data","lib","ajax","insertTracks","getAlbums","getArtists","pauseStream","playStream","type","id","allowedStreamTypes","indexOf","apiUrl","playTrack","play","playAlbum","playArtist","playNext","playPrev","api","Lib","selectParent","el","parentSelector","matchesSelector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","call","parentElement","template","str","retstr","prop","regex","RegExp","replace","toDom","tmp","document","createElement","innerHTML","childNodes","serialize","obj","p","hasOwnProperty","push","encodeURIComponent","join","url","method","reqBody","reqMethod","myCallback","e","target","response","myRequest","XMLHttpRequest","responseType","addEventListener","setRequestHeader","addFormData","open","send","App","tracks","controls","foot","init","socket","WebSocket","location","host","onopen","ev","onmessage","dat","json","JSON","parse","console","log","setState","playstate","update","loadFromLS","prev","onPrev","next","onNext","onPlay","getAlbumById","find","item","_id","getArtistById","getTrackById","window","localStorage","warn","getItem","state","playing","artistid","x","albumid","getElementById","preventDefault","playResponse","error","alert","trackEl","querySelector","artistEl","albumEl","playIcon","title","name","classList","remove","add","body","app","settingsBtn","searchBtn","songTab","artistTab","albumTab","statusBar","songTabClick","loadSongs","albumTabClick","loadAlbums","artistTabClick","loadArtists","dataBox","openSettings","toggle","clear","songTemplate","artistname","length","i","thisArtist","setItem","stringify","loadItems","mediaTemplate","song","appendChild","mediaItem","playbutton","clearBtns","curPlayingSongBtn","dataset","pause","arguments","contains","loadSongsByX","loadSongsByAlbum","loadSongsByArtist","thisAlbum","statusTemplate","artistTitle","click"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * create a new clientside API object\n * @class\n * @classdesc this file does all the data interaction with the BoomBox API\n *            this is purposely designed to match the API endpoints\n */\nvar ApiInterface = function() {\n  /**\n   * @typedef {Object} searchOpts\n   * @property {string} id - the unique musicbrainz id of the single\n   * item you wish to retrieve\n   * @property {number} limit - max number of items to retrieve\n   * @property {number} page - get items starting at number ((page-1)*limit)+1\n   * @property {string} search - search phrase to find in item name or title\n   */\n\n  /**\n   * returns the result of the AJAX http request.\n   * Entire AJAX request is included in callback.\n   * @callback getCallback\n   * @param {Object} HTTP response\n   */\n\n  var self = this;\n  this.songs = {};\n  this.albums = {};\n  this.artists = {};\n  this.stream = {};\n  this.stream.track = {};\n  this.stream.album = {};\n  this.stream.artist = {};\n\n  /**\n   * get songs from server\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   * @see Api#getTracks\n   */\n  this.getTracks = function(opts,callback) {\n    var data = opts;\n    // console.log(\"getting tracks:\", data);\n    lib.ajax(\"/api/v1/track\",data,callback);\n  };\n\n  /**\n   * Send a new track to the server\n   * @param {Track}\n   * @param {insertResponse} callback - callback receives result of the insert attempt\n   * @see Api#insertTracks\n   */\n  this.insertTracks = function(track) {\n    // we may eventually need to insert tracks through the frontend.\n  };\n\n  /**\n   * get albums from server by id,search phrase, etc.\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   * @see Api#getAlbums\n   */\n  this.getAlbums = function(opts, callback) {\n    var data = opts;\n    lib.ajax(\"/api/v1/album\",data,callback);\n  };\n\n  /**\n   * get artists from server by id,search phrase, etc.\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   * @see API#getArtists\n   */\n  this.getArtists = function(opts, callback) {\n    var data = opts;\n    lib.ajax(\"/api/v1/artist\",data,callback);\n  };\n\n  // streaming endpoints\n  /**\n   * pause the currently playing item\n   * @param {pauseResponse} callback - response given when pausing an item\n   * @see Playlist#pause\n   */\n  this.pauseStream = function(callback) {\n    lib.ajax(\"/api/v1/stream/pause\",{},callback);\n  };\n\n  /**\n   * play a track, artist, or album by ID\n   * @param {string} type - one of \"track\",\"album\",\"artist\"\n   * @param {string} id - unique ID of the item to play\n   * @param {playResponse} callback - result of the play action\n   * @see Playlist#play\n   */\n  this.playStream = function(type, id, callback) {\n    var allowedStreamTypes = [\"track\",\"album\",\"artist\"];\n    if (allowedStreamTypes.indexOf(type) == -1) {\n      throw \"Stream play type must be one of: \" + allowedStreamTypes;\n    }\n    if (typeof callback !== \"function\") {\n      throw \"Callback is required.\";\n    }\n\n    var apiUrl = \"/api/v1/stream/\" + type + \"/\" + id;\n    lib.ajax(apiUrl,{},callback);\n  };\n\n  /**\n   * play a certain track, given its id\n   * @param {string} id - the unique id of the track we wish to play\n   * @param {playResponse} callback - result of the play action\n   * @see Playlist#play\n   */\n  this.playTrack = function(id,callback) {\n    self.stream.play(\"track\",id,callback);\n  };\n\n  /**\n   * play a certain album, given its id\n   * @param {string} id - the unique id of the album we wish to listen to\n   * @param {playResponse} callback - result of the play action\n   * @see Playlist#play\n   */\n  this.playAlbum = function(id,callback) {\n    self.stream.play(\"album\",id,callback);\n  };\n\n  /**\n   * play all songs by a certain artist, given its id\n   * @param {string} id - the unique id of the artist we wish to listen to\n   * @param {playResponse} callback - result of the play action\n   * @see Playlist#play\n   */\n  this.playArtist = function(id,callback) {\n    self.stream.play(\"artist\",id,callback);\n  };\n\n  /**\n   * Skip to the next song in the pre-computed playlist.\n   * The playlist is reset when\n   *  - user clicks \"play\" button on a track,\n   *  - user clicks \"play\" buton on an artist,\n   *  - user clicks \"play\" button on an album.\n   *  For any of these, if the item was already playing, but paused, it would not regenerate the playlist.\n   * @param {playResponse}\n   * @see Playlist#next\n   */\n  this.playNext = function(callback) {\n    var apiUrl = \"/api/v1/stream/next\";\n    lib.ajax(apiUrl,{},callback);\n  };\n\n  /**\n   * play the previous song in the pre-computed playlist.\n   * Unlike most \"previous\" buttons, does not restart the given song if already playing.\n   * @param {playResponse}\n   * @see Playlist#prev\n   */\n  this.playPrev = function(callback) {\n    var apiUrl = \"/api/v1/stream/prev\";\n    lib.ajax(apiUrl,{},callback);\n  };\n\n};\n\n// instantiate it, put in a global var\nvar api = new ApiInterface();\n","/**\n * create a new clientside Lib object\n * @class\n * @classdesc this is a short library of useful functions, primarily Ajax.\n */\nvar Lib = function() {\n  var self = this;\n\n  /**\n   * selectParent()\n   * similar to jquery's closest() function,\n   * the difference being that we are not chainable.\n   * @param {Node} el - the element which has parents\n   * @param {string} parentSelector - the CSS-style selector which will identify the parents we are searching for\n   * @return {Node|boolean} An HTML node if if matches the parentSelector. Else false.\n   */\n  this.selectParent = function(el, parentSelector) {\n    var matchesSelector = el.matches ||\n                          el.webkitMatchesSelector ||\n                          el.mozMatchesSelector ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tel.msMatchesSelector;\n\n    while (el) {\n\t\t\t// this loop traverses through the element's parent nodes\n\t\t\tif (matchesSelector.call(el, parentSelector)) {\n\t\t\t\t// if it's a match, quit and return true.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tel = el.parentElement;\n    }\n\n    return el;\n  };\n\n  /**\n   * template()\n   * do Mustache-style templating on a string.\n   * Note this is SUPER basic. Does not do nesting, loops, conditionals, etc.\n   * Just simple {name}-value replacement.\n   * @param {string} str - the string to search/replace IN\n   * @param {Object} data - a flat object of key/value pairs to insert into the HTML string.\n   * @returns {string} a full HTML with no more {key} blocks unless the corresponding data[key] did not exist.\n   */\n  this.template = function(str, data) {\n    var retstr = str;\n\n    // loop over all data properties\n    for (var prop in data) {\n      // create a regex searcher for {prop}\n      var regex = new RegExp('\\{'+prop+'\\}','ig');\n      //console.log(\"lib.js/template(): regex\",regex);\n      \n      // update string\n      retstr = retstr.replace(regex,data[prop]);\n    }\n    return retstr;\n  };\n\n  /** toDom()\n   * convert a string into a fully build nodeList\n   * @param {string} str - the string of correctly-formatted HTML\n   * @return {NodeList} the HTML list of nodes\n   */\n  this.toDom = function(str) {\n    var tmp = document.createElement(\"div\");\n    tmp.innerHTML = str;\n    return tmp.childNodes;\n  };\n\n  /**\n   * serialize()\n   * take an object, output a string fit for the querystring.\n   * @param {object} obj - the data object we wish to serialize.\n   * @cite: http://stackoverflow.com/a/1714899/1525594\n  */\n  this.serialize = function(obj) {\n    var str = [];\n    for(var p in obj)\n      if (obj.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n      }\n    return str.join(\"&\");\n  };\n\n  /**\n   * a native Javascript ajax function.\n   * Wraps XMLHttpRequest() with a url, data object, and a nice little callback.\n   * @param {string} url - HTTP url to send request to\n   * @param {Object} data - key/value pairs of GET or POST-type values to send\n   * @param {ajaxResponse} callback - gets called with response from request\n   * @param {string} method - one of \"GET\" or \"POST\"\n   */\n  this.ajax = function(url,data,callback,method) {\n    var reqBody = '',\n        reqBoundary,\n        reqMethod = method ? method : \"GET\";//method is GET by default\n        data = data ? data : {}; // data object is empty object by default\n\n    // parameter validation\n    if (!url) { throw \"lib.js/ajax(): Url is required.\"; }\n    if (!callback) { throw \"lib.js/ajax(): Callback is required.\"; }\n\n    var myCallback = function(e) {\n      //console.log(\"lib.js/ajax(): Ajax request completed!\",arguments);\n      callback(e.target.response,e.target);\n    };\n\n    var myRequest = new XMLHttpRequest();\n    myRequest.responseType = \"json\";\n    myRequest.addEventListener(\"load\",myCallback);\n\n    if (reqMethod === \"POST\") {\n      myRequest.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n      reqBody = addFormData();\n    } else if (reqMethod === \"GET\") {\n      url = url + \"?\" + self.serialize(data);\n    }\n\n    // open the connection, send the data\n    myRequest.open(reqMethod,url);\n    myRequest.send(data);\n  };\n\n  return this;\n};\n\n// instantiate it, put in a global var\nlib = new Lib();\n","/**\n * create a new clientside App object.\n * @class\n * @classdesc The remote control web app for Boombox.\n *            basically all the app-ish type stuff.\n *            buttons, footer controls, etc.\n */\nApp = function() {\n  var self = this;\n\n  this.artists = false;\n  this.albums = false;\n  this.tracks = false;\n  this.controls = {};\n  this.foot = {};\n\n  /**\n   * More or less a \"setup\" function.\n   * Starts the web socket, sets up a few event listeners.\n   * @return {Api}\n   */\n  this.init = function() {\n    var self = this;\n\n    // open web socket connection\n    self.socket = new WebSocket(\"wss://\" + location.host);\n    self.socket.onopen = function(ev) {\n      // console.log(\"Socket is open!\", ev);\n    };\n    self.socket.onmessage = function(dat) {\n      var json = JSON.parse(dat.data);\n      console.log(\"received message from websocket connection!\", json);\n\n      // handle app state changes\n      switch(json.type) {\n        case \"playevent\":\n\n          // update the state\n          self.setState(json.playstate);\n\n          // update the footer \"now playing\" info\n          self.foot.update();\n\n          break;\n        default:\n          // who knows\n          break;\n      }\n    };\n\n    // get albums, artists, and tracks from local storage\n    self.loadFromLS();\n\n    // setup event listeners\n    self.controls.prev.addEventListener(\"click\", self.controls.onPrev);\n    self.controls.next.addEventListener(\"click\", self.controls.onNext);\n    self.controls.play.addEventListener(\"click\", self.controls.onPlay);\n  };\n\n  /**\n   * Searches through locally stored app.albums array\n   * to find the album with this id.\n   * BUG: if app.albums is empty, this function triggers an error.\n   * @param {string} id - musicbrainz id of the album/release\n   * @return {Object|undefined} undefined if not found, else Album object\n   */\n  this.getAlbumById = function(id) {\n    return self.albums.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  };\n\n  /**\n   * Searches through locally stored app.artists array\n   * to find the artists with this id.\n   * BUG: if app.artists is empty, this function triggers an error.\n   * @param {string} id - musicbrainz id of the artist\n   * @return {Object|undefined} undefined if not found, else Artist object\n   */\n  this.getArtistById = function(id) {\n    return self.artists.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  };\n\n  /**\n   * Searches through locally stored app.tracks array\n   * to find the song track with this id.\n   * BUG: if app.tracks is empty, this function triggers an error.\n   * @param {string} id - musicbrainz id of the track\n   * @return {Object|undefined} undefined if not found, else Track object\n   */\n  this.getTrackById = function(id) {\n    return self.tracks.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  };\n\n  /**\n   * load app data from local storage.\n   * This is WAY faster than a network request!\n   * Works offline too.\n   */\n  this.loadFromLS = function() {\n    if (typeof window.localStorage !== \"object\") {\n      console.warn(\"Browser does not support local storage.\");\n    } else {\n      if (localStorage.getItem(\"tracks\")) {\n        self.tracks = JSON.parse(localStorage.getItem(\"tracks\"));\n      }\n      if (localStorage.getItem(\"artists\")) {\n        self.artists = JSON.parse(localStorage.getItem(\"artists\"));\n      }\n      if (localStorage.getItem(\"albums\")) {\n        self.albums = JSON.parse(localStorage.getItem(\"albums\"));\n      }\n    }\n  };\n\n  /**\n   * this object helps keep track of the currently playing song,\n   * albumid, artistid, nextid, previd, play/pause, etc.\n   * @typedef {Object} state\n   * @property {boolean} state.playing - is there a track playing this very second?\n   * @property {(boolean|string)} state.prev - if there is a \"previous\" song in the playlist, its id is stored here. Else false.\n   * @property {(boolean|string)} state.next - if there is a \"next\" song in the playlist, its id is stored here. Else false.\n   *\n   */\n  this.state = {\n    playing: false,\n    prev: false,\n    next: false\n  };\n\n  /**\n   * knowing the current track in the state,\n   * get the album info and artist info\n   * and insert them into the self.state object.\n   * @param {State} state - the currently playing song\n   * @return {State} state - the UPDATED playing state, with full album info and artist info\n   */\n  this.setState = function(state) {\n    self.state = state;\n    self.state.artist = false;\n    self.state.album = false;\n\n    if (self.state.track.artistid && self.artists) {\n      // get the album by id\n      // note, all these albums / artists come from local storage\n      self.state.artist = self.artists.find(function(x) {\n        return x._id === self.state.track.artistid;\n      });\n    }\n\n    if (self.state.track.albumid && self.albums) {\n      // get the album by id\n      // note, all these albums / artists come from local storage\n      self.state.album = self.albums.find(function(x) {\n        return x._id === self.state.track.albumid;\n      });\n    }\n\n    return self.state;\n  };\n\n  /**\n   * app controls\n   * This file manages the \"Now Playing\" bar and app controls\n   * at the bottom of the app.\n   *\n   * The app controls include\n   *    play/pause button,\n   *    previous song button,\n   *    next button\n   *\n   * The \"Now Playing\" bar includes\n   *    track title,\n   *    album title,\n   *    artist title\n  */\n  this.controls.prev = document.getElementById(\"control__playprev\");\n  this.controls.next = document.getElementById(\"control__playnext\");\n  this.controls.play = document.getElementById(\"control__playbtn\");\n\n  /**\n   * this function is called by the \"play\" button in the app controls\n   * it is called ONLY by pressing the play/pause button\n   * it determines whether to\n   * - pause the current song,\n   * - or resume the current song\n   * @param {object} e - the event straight from the on(\"click\") listener\n   */\n  this.controls.onPlay = function(e) {\n    e.preventDefault();\n    if(!self.state.playing) {\n      api.playTrack(self.state.track._id, self.controls.playResponse);\n    } else {\n      api.pauseStream(self.controls.playResponse);\n    }\n  };\n\n  /**\n   * @todo write documentation\n   */\n  this.controls.playResponse = function(json) {\n    if (json.error) {\n      console.warn(\"Error, couldn't find item!\",json);\n      alert(\"Error! Could not find item\");\n    } else {\n      console.log(\"playing:\",json);\n\n\n      // open the footer \"now playing\" thing\n      self.foot.open();\n    }\n  };\n\n  /**\n   * this function is called by the \"next\" button in the app controls\n   * it is called ONLY by pressing the \"previous\" button\n   * @param {object} e - the event straight from the on(\"click\") listener\n   */\n  this.controls.onPrev = function(e) {\n    e.preventDefault();\n    if (self.state.prev) {\n      // if the API says there is a \"previous\" song that we can play\n      api.playPrev(self.controls.playResponse);\n    } else {\n      // else error?\n    }\n  };\n\n  /**\n   * this function is called by the \"next\" button in the app controls\n   * it is called ONLY by pressing the \"next\" button\n   * @param {object} e - the event straight from the on(\"click\") listener\n   */\n  this.controls.onNext = function(e) {\n    e.preventDefault();\n    if (self.state.next) {\n      // if the API says there is a \"next\" song that we can play\n      api.playNext(self.controls.playResponse);\n    } else {\n      // else error?\n    }\n  };\n\n\n  // App footer\n  this.foot.trackEl = document.querySelector(\".playing__track__title\");\n  this.foot.artistEl = document.querySelector(\".playing__track__artist\");\n  this.foot.albumEl = document.querySelector(\".playing__track__album\");\n\n  /**\n   * fill the footer's \"now playing\" info\n   * using\n   * - app.state.track.title,\n   * - app.state.artist.name, and\n   * - app.state.album.title\n   *\n   * Also, disabled or enables the previous and next buttons\n   * as appropriate, depending on\n   * - app.state.prev !== false and\n   * - app.state.next !== false\n   */\n  this.foot.update = function() {\n    var playIcon = self.controls.play.querySelector(\".fa\");\n\n    // update \"now playing\" info\n    self.foot.trackEl.innerHTML = self.state.track.title;\n    self.foot.artistEl.innerHTML = self.state.artist.name;\n    self.foot.albumEl.innerHTML = self.state.album.title;\n\n    // if there is no \"next\" song, disable the button\n    if (!self.state.next) {\n      self.controls.next.classList.add(\"disabled\");\n    } else {\n      self.controls.next.classList.remove(\"disabled\");\n    }\n\n    // if there is no \"previous\" song, disable the button\n    if (!self.state.prev) {\n      self.controls.prev.classList.add(\"disabled\");\n    } else {\n      self.controls.prev.classList.remove(\"disabled\");\n    }\n\n    if (!self.state.playing) {\n      // if paused, show the \"play\" icon\n      playIcon.classList.add(\"fa-play\");\n      playIcon.classList.remove(\"fa-pause\");\n    } else {\n      // if playing, show the \"pause\" icon\n      playIcon.classList.remove(\"fa-play\");\n      playIcon.classList.add(\"fa-pause\");\n    }\n  };\n\n  /**\n   * open the controls / now playing footer\n   * by adding the class .open-footer to the body element.\n   * It's up to the CSS to do something with that class.\n   */\n  this.foot.open = function() {\n    document.body.classList.add(\"open-footer\");\n  };\n\n  // call init to set up the footer\n  this.init();\n};\n\nvar app = new App();\n","//main.js - This file does all the app-ish stuff. Includes buttons, animations, and possibly offline functionality.\n\n\n// Buttons!\nvar settingsBtn = document.getElementById(\"btnSettings\"),\n    searchBtn = document.getElementById(\"btnSearch\"),\n    songTab = document.getElementById(\"tab__songs\"),\n    artistTab = document.getElementById(\"tab__artists\"),\n    albumTab = document.getElementById(\"tab__albums\"),\n    statusBar = document.getElementById(\"app-statusbar\");\n\n// the \"Songs\" tab in the app nav\nvar songTabClick = function(e) {\n  /**\n   * Deal with someone clicking the song tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.tracks) {\n    // get all songs\n    api.getTracks({},loadSongs);\n  } else {\n    loadSongs(app.tracks);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  albumTab.classList.remove(\"active\");\n  artistTab.classList.remove(\"active\");\n  songTab.classList.add(\"active\");\n};\n\n// the \"Albums\" tab in the app nav\nvar albumTabClick = function(e) {\n  /**\n   * Deal with someone clicking the album tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.albums) {\n    // get all songs\n    api.getAlbums({},loadAlbums);\n  } else {\n    loadAlbums(app.albums);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  songTab.classList.remove(\"active\");\n  artistTab.classList.remove(\"active\");\n  albumTab.classList.add(\"active\");\n};\n\n// the \"Artists\" tab in the app nav\nvar artistTabClick = function(e) {\n  /**\n   * Deal with someone clicking the album tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.artists) {\n    // get all songs\n    api.getArtists({},loadArtists);\n  } else {\n    loadArtists(app.artists);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  songTab.classList.remove(\"active\");\n  albumTab.classList.remove(\"active\");\n  artistTab.classList.add(\"active\");\n};\n\n// Data\n// here we set up the loading of song lists, album lists, artist lists, etc.\nvar dataBox = document.getElementById(\"app-data\");\n\nvar openSettings = function() {\n  document.getElementById(\"app-settings\").classList.toggle(\"open\");\n};\n\n\n// events\n// here we set up all the button click events\nsettingsBtn.addEventListener(\"click\",openSettings);\nsongTab.addEventListener(\"click\", songTabClick);\nalbumTab.addEventListener(\"click\", albumTabClick);\nartistTab.addEventListener(\"click\", artistTabClick);\ndocument.getElementById(\"clear__cache\").addEventListener(\"click\", function(e) {\n  if (typeof window.localStorage !== \"undefined\") {\n    // we later may want to clear just app.tracks, app.albums, and app.artists, for example\n    app.albums = false;\n    app.artists = false;\n    app.tracks = false;\n    window.localStorage.clear();\n  }\n  e.preventDefault();\n});\n\n// Get songs\nvar loadSongs = function(json) {\n  var songTemplate = '<div class=\"list-item\" id=\"{_id}\" data-type=\"track\"><div class=\"track__info\"><h4 class=\"title\">{title}</h4><h5 class=\"artist__name\">{artistname}</h5></div><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.tracks = json;\n\n  // for each song, append the artist name\n  if (!json[0].artistname && app.artists.length) {\n    for (var i=0; i < json.length; i++) {\n      // for each stored artist, check the id against the current track.artistid\n      thisArtist = app.getArtistById(json[i].artistid);\n      if (thisArtist) {\n        json[i].artistname = thisArtist.name;\n      }\n    }\n  }\n\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"tracks\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadArtists = function(json) {\n  var songTemplate = '<div class=\"list-item item__artist\" id=\"{_id}\" data-type=\"artist\"><h4 class=\"title\">{name}</h4><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.artists = json;\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"artists\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadAlbums = function(json) {\n  var songTemplate = '<div class=\"list-item item__album\" id=\"{_id}\" data-type=\"album\"><h4 class=\"title\">{title}</h4><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.albums = json;\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"albums\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadItems = function(json, mediaTemplate) {\n  dataBox.innerHTML = '';\n\n  // insert into page\n  for (var i=0;i<json.length;i++) {\n    // use our new template function in the library\n    var song = lib.toDom(lib.template(mediaTemplate,json[i]));\n    dataBox.appendChild(song[0]);\n    \n    var curSong = new mediaItem(document.getElementById(json[i]._id));\n  }\n};\n\n//This object does all the stuff with the song divs.\nvar mediaItem = function(item) {\n  var self = this,\n      playbutton = item.querySelector(\".fa\");\n\n  this.clearBtns = function() {\n    var curPlayingSongBtn = document.querySelector(\".fa.fa-pause\");\n    if (curPlayingSongBtn) {\n      curPlayingSongBtn.classList.remove(\"fa-pause\");\n      curPlayingSongBtn.classList.add(\"fa-play\");\n    }\n  };\n\n  this.play = function(e) {\n    self.clearBtns();\n    item.classList.add(\"active\");\n    playbutton.classList.remove(\"fa-play\");\n    playbutton.classList.add(\"fa-pause\");\n\n    // play the particular type of media\n    switch(item.dataset.type) {\n      case \"album\":\n        // play all the songs in the album\n        api.playAlbum(item.id, app.controls.playResponse);\n        break;\n      case \"artist\":\n        // play all the songs for the particular artist\n        api.playArtist(item.id, app.controls.playResponse);\n        break;\n      case \"track\":\n        // play this particular song\n        api.playTrack(item.id, app.controls.playResponse);\n        break;\n    }\n  };\n\n\n  this.pause = function(e) {\n    item.classList.remove(\"active\");\n    playbutton.classList.add(\"fa-play\");\n    playbutton.classList.remove(\"fa-pause\");\n    api.pauseStream(item.id, function() {\n      console.log(\"Whoa... it's paused!?\",arguments);\n    });\n  };\n\n  this.toggle = function(e) {\n    if (item.classList.contains(\"active\")) {//then song is being played right now.\n      self.pause(e);\n    } else {//else song is currently paused. play it!\n      self.play(e);\n    }\n  };\n\n  // setup the play/pause button event listener\n  item.querySelector(\".playBtn\").addEventListener(\"click\",self.toggle);\n\n  return this;\n};\nvar loadSongsByX = function(e) {\n  var item, opts,\n      album = lib.selectParent(e.target, \".item__album\"),\n      artist = lib.selectParent(e.target, \".item__artist\");\n\n  if (album) {\n    //console.log(\"found album:\", album);\n\t\tif (album) {\n      loadSongsByAlbum(album.id);\n    }\n  } else if (artist) {\n    //console.log(\"found artist:\", artist);\n\t\tif (artist) {\n      loadSongsByArtist(artist.id);\n    }\n\t}\n};\nloadSongsByAlbum = function(albumid) {\n  var thisAlbum = app.getAlbumById(albumid),\n      statusTemplate = \"<h2>{album}</h2><h4>by {artist}</h4>\",\n      dat = {\n        album: thisAlbum.title,\n        artist: app.getArtistById(thisAlbum.artistid).name\n      };\n\n  // put album name in status bar\n  statusBar.innerHTML = lib.template(statusTemplate, dat);\n\n  // query for songs by album ID\n  opts = {\n    albumid: albumid\n  };\n  api.getTracks(opts, loadSongs);\n};\nloadSongsByArtist = function(artistid) {\n  var thisArtist = app.getArtistById(artistid);\n  artistTitle = '<h2>' + thisArtist.name + '</h2>';\n\n  // put artist name in status bar\n  statusBar.innerHTML = artistTitle;\n\n  // query for songs by artist ID\n  opts = {\n    artistid: artistid\n  };\n  api.getTracks(opts, loadSongs);\n};\n\n// on initial page load, show all the songs\nsongTab.click();\n\n// window event listeners - listen for clicks on the non-existent album or artist divs\nwindow.addEventListener(\"click\", loadSongsByX);\n"]}