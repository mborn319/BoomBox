{"version":3,"sources":["../../js/api.js","../../js/lib.js","../../js/app.js","../../js/main.js"],"names":["Api","self","this","songs","albums","artists","stream","track","album","artist","get","opts","callback","data","lib","ajax","insert","pause","play","type","id","allowedStreamTypes","indexOf","apiUrl","next","prev","api","Lib","selectParent","el","parentSelector","matchesSelector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","call","parentElement","template","str","retstr","prop","regex","RegExp","replace","toDom","tmp","document","createElement","innerHTML","childNodes","serialize","obj","p","hasOwnProperty","push","encodeURIComponent","join","url","method","reqBody","reqMethod","myCallback","e","target","response","myRequest","XMLHttpRequest","responseType","addEventListener","setRequestHeader","addFormData","open","send","app","tracks","init","socket","WebSocket","location","host","onopen","ev","onmessage","dat","json","JSON","parse","console","log","setState","playstate","foot","update","loadFromLS","controls","onPrev","onNext","onPlay","getAlbumById","find","item","_id","getArtistById","getTrackById","window","localStorage","warn","getItem","state","playing","artistid","x","albumid","getElementById","preventDefault","playResponse","error","alert","trackEl","querySelector","artistEl","albumEl","playIcon","title","name","classList","remove","add","body","settingsBtn","searchBtn","songTab","artistTab","albumTab","statusBar","songTabClick","loadSongs","albumTabClick","loadAlbums","artistTabClick","loadArtists","dataBox","openSettings","toggle","clear","songTemplate","artistname","length","i","thisArtist","setItem","stringify","loadItems","mediaTemplate","song","appendChild","mediaItem","playbutton","clearBtns","curPlayingSongBtn","dataset","arguments","contains","loadSongsByX","loadSongsByAlbum","loadSongsByArtist","thisAlbum","statusTemplate","artistTitle","click"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * create a new clientside API object\n * @class\n * @classdesc this file does all the data interaction with the BoomBox API\n *            this is purposely designed to match the API endpoints\n */\nvar Api = function() {\n  /**\n   * @typedef {Object} searchOpts\n   * @property {string} id - the unique musicbrainz id of the single\n   * item you wish to retrieve\n   * @property {number} limit - max number of items to retrieve\n   * @property {number} page - get items starting at number ((page-1)*limit)+1\n   * @property {string} search - search phrase to find in item name or title\n   */\n  /**\n   * returns the result of the AJAX http request.\n   * Entire AJAX request is included in callback.\n   * @callback getCallback\n   * @param {Object} HTTP response\n   */\n  var self = this;\n  self.songs = {};\n  self.albums = {};\n  self.artists = {};\n  self.stream = {};\n  self.stream.track = {};\n  self.stream.album = {};\n  self.stream.artist = {};\n\n  /**\n   * get songs from server\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   */\n  self.songs.get = function(opts,callback) {\n    var data = opts;\n    // console.log(\"getting tracks:\", data);\n    lib.ajax(\"/api/v1/track\",data,callback);\n  };\n\n  /**\n   * Send a new track to the server\n   * @param {Track}\n   * @param {insertResponse} callback - callback receives result of the insert attempt\n   */\n  self.songs.insert = function(track) {\n    // we may eventually need to insert tracks through the frontend.\n  };\n  /**\n   * get songs from server by id,search phrase, etc.\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   */\n\n  /**\n   * get albums from server by id,search phrase, etc.\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   */\n  self.albums.get = function(opts, callback) {\n    var data = opts;\n    lib.ajax(\"/api/v1/album\",data,callback);\n  };\n\n  /**\n   * get artists from server by id,search phrase, etc.\n   * @param {searchOpts}\n   * @param {getCallback} callback - the AJAX response from the server\n   */\n  self.artists.get = function(opts, callback) {\n    var data = opts;\n    lib.ajax(\"/api/v1/artist\",data,callback);\n  };\n\n  // streaming endpoints\n  /**\n   * pause the currently playing item\n   * @param {pauseResponse} callback - response given when pausing an item\n   */\n  self.stream.pause = function(callback) {\n    lib.ajax(\"/api/v1/stream/pause\",{},callback);\n  };\n\n  /**\n   * play a track, artist, or album by ID\n   * @param {string} type - one of \"track\",\"album\",\"artist\"\n   * @param {string} id - unique ID of the item to play\n   * @param {playResponse} callback - result of the play action\n   */\n  self.stream.play = function(type, id, callback) {\n    var allowedStreamTypes = [\"track\",\"album\",\"artist\"];\n    if (allowedStreamTypes.indexOf(type) == -1) {\n      throw \"Stream play type must be one of: \" + allowedStreamTypes;\n    }\n    if (typeof callback !== \"function\") {\n      throw \"Callback is required.\";\n    }\n\n    var apiUrl = \"/api/v1/stream/\" + type + \"/\" + id;\n    lib.ajax(apiUrl,{},callback);\n  };\n\n  /**\n   * play a certain track, given its id\n   * @param {string} id - the unique id of the track we wish to play\n   * @param {playResponse} callback - result of the play action\n   */\n  self.stream.track.play = function(id,callback) {\n    self.stream.play(\"track\",id,callback);\n  };\n\n  /**\n   * play a certain album, given its id\n   * @param {string} id - the unique id of the album we wish to listen to\n   * @param {playResponse} callback - result of the play action\n   */\n  self.stream.album.play = function(id,callback) {\n    self.stream.play(\"album\",id,callback);\n  };\n\n  /**\n   * play all songs by a certain artist, given its id\n   * @param {string} id - the unique id of the artist we wish to listen to\n   * @param {playResponse} callback - result of the play action\n   */\n  self.stream.artist.play = function(id,callback) {\n    self.stream.play(\"artist\",id,callback);\n  };\n\n  /**\n   * Skip to the next song in the pre-computed playlist.\n   * The playlist is reset when\n   *  - user clicks \"play\" button on a track,\n   *  - user clicks \"play\" buton on an artist,\n   *  - user clicks \"play\" button on an album.\n   *  For any of these, if the item was already playing, but paused, it would not regenerate the playlist.\n   * @param {playResponse}\n   */\n  self.stream.next = function(callback) {\n    var apiUrl = \"/api/v1/stream/next\";\n    lib.ajax(apiUrl,{},callback);\n  };\n\n  /**\n   * play the previous song in the pre-computed playlist.\n   * Unlike most \"previous\" buttons, does not restart the given song if already playing.\n   * @param {playResponse}\n   */\n  self.stream.prev = function(callback) {\n    var apiUrl = \"/api/v1/stream/prev\";\n    lib.ajax(apiUrl,{},callback);\n  };\n\n};\nvar api = new Api();\n","// lib.js - this is a short library of useful functions, primarily Ajax.\n\nvar Lib = function() {\n  var self = this;\n\n  /**\n   * selectParent()\n   * similar to jquery's closest() function,\n   * the difference being that we are not chainable.\n   * @param {Node} el - the element which has parents\n   * @param {string} parentSelector - the CSS-style selector which will identify the parents we are searching for\n   * @return {Node|boolean} An HTML node if if matches the parentSelector. Else false.\n   */\n  this.selectParent = function(el, parentSelector) {\n    var matchesSelector = el.matches ||\n                          el.webkitMatchesSelector ||\n                          el.mozMatchesSelector ||\n\t\t\t\t\t\t\t\t\t\t\t\t\tel.msMatchesSelector;\n\n    while (el) {\n\t\t\t// this loop traverses through the element's parent nodes\n\t\t\tif (matchesSelector.call(el, parentSelector)) {\n\t\t\t\t// if it's a match, quit and return true.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tel = el.parentElement;\n    }\n\n    return el;\n  };\n\n  /**\n   * template()\n   * do Mustache-style templating on a string.\n   * Note this is SUPER basic. Does not do nesting, loops, conditionals, etc.\n   * Just simple {name}-value replacement.\n   * @param {string} str - the string to search/replace IN\n   * @param {Object} data - a flat object of key/value pairs to insert into the HTML string.\n   * @returns {string} a full HTML with no more {key} blocks unless the corresponding data[key] did not exist.\n   */\n  this.template = function(str, data) {\n    var retstr = str;\n\n    // loop over all data properties\n    for (var prop in data) {\n      // create a regex searcher for {prop}\n      var regex = new RegExp('\\{'+prop+'\\}','ig');\n      //console.log(\"lib.js/template(): regex\",regex);\n      \n      // update string\n      retstr = retstr.replace(regex,data[prop]);\n    }\n    return retstr;\n  };\n\n  /** toDom()\n   * convert a string into a fully build nodeList\n   * @param {string} str - the string of correctly-formatted HTML\n   * @return {NodeList} the HTML list of nodes\n   */\n  this.toDom = function(str) {\n    var tmp = document.createElement(\"div\");\n    tmp.innerHTML = str;\n    return tmp.childNodes;\n  };\n\n  /**\n   * serialize()\n   * take an object, output a string fit for the querystring.\n   * @param {object} obj - the data object we wish to serialize.\n   * @cite: http://stackoverflow.com/a/1714899/1525594\n  */\n  this.serialize = function(obj) {\n    var str = [];\n    for(var p in obj)\n      if (obj.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n      }\n    return str.join(\"&\");\n  };\n\n  /**\n   * a native Javascript ajax function.\n   * Wraps XMLHttpRequest() with a url, data object, and a nice little callback.\n   * @param {string} url - HTTP url to send request to\n   * @param {Object} data - key/value pairs of GET or POST-type values to send\n   * @param {ajaxResponse} callback - gets called with response from request\n   * @param {string} method - one of \"GET\" or \"POST\"\n   */\n  this.ajax = function(url,data,callback,method) {\n    var reqBody = '',\n        reqBoundary,\n        reqMethod = method ? method : \"GET\";//method is GET by default\n        data = data ? data : {}; // data object is empty object by default\n\n    // parameter validation\n    if (!url) { throw \"lib.js/ajax(): Url is required.\"; }\n    if (!callback) { throw \"lib.js/ajax(): Callback is required.\"; }\n\n    var myCallback = function(e) {\n      //console.log(\"lib.js/ajax(): Ajax request completed!\",arguments);\n      callback(e.target.response,e.target);\n    };\n\n    var myRequest = new XMLHttpRequest();\n    myRequest.responseType = \"json\";\n    myRequest.addEventListener(\"load\",myCallback);\n\n    if (reqMethod === \"POST\") {\n      myRequest.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\");\n      reqBody = addFormData();\n    } else if (reqMethod === \"GET\") {\n      url = url + \"?\" + self.serialize(data);\n    }\n\n    // open the connection, send the data\n    myRequest.open(reqMethod,url);\n    myRequest.send(data);\n  };\n\n  return this;\n};\nlib = new Lib();\n","app = {\n  artists: false,\n  albums: false,\n  tracks: false,\n  init: function() {\n    var self = this;\n\n    // open web socket connection\n    app.socket = new WebSocket(\"wss://\" + location.host);\n    app.socket.onopen = function(ev) {\n      // console.log(\"Socket is open!\", ev);\n    };\n    app.socket.onmessage = function(dat) {\n      var json = JSON.parse(dat.data);\n      console.log(\"received message from websocket connection!\", json);\n\n      // handle app state changes\n      switch(json.type) {\n        case \"playevent\":\n\n          // update the state\n          app.setState(json.playstate);\n\n          // update the footer \"now playing\" info\n          app.foot.update();\n\n          break;\n        default: \n          // who knows\n          break;\n      }\n    };\n\n    // get albums, artists, and tracks from local storage\n    self.loadFromLS();\n\n    // setup event listeners\n    self.controls.prev.addEventListener(\"click\", self.controls.onPrev);\n    self.controls.next.addEventListener(\"click\", self.controls.onNext);\n    self.controls.play.addEventListener(\"click\", self.controls.onPlay);\n    \n    return this;\n  },\n  getAlbumById: function(id) {\n    /**\n     * Searches through locally stored app.albums array\n     * to find the album with this id.\n     * BUG: if app.albums is empty, this function triggers an error.\n     * @param {string} id - musicbrainz id of the album/release\n     * @return {Object|undefined} undefined if not found, else Album object\n     */\n    return app.albums.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  },\n  getArtistById: function(id) {\n    /**\n     * Searches through locally stored app.artists array\n     * to find the artists with this id.\n     * BUG: if app.artists is empty, this function triggers an error.\n     * @param {string} id - musicbrainz id of the artist\n     * @return {Object|undefined} undefined if not found, else Artist object\n     */\n    return app.artists.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  },\n  getTrackById: function(id) {\n    /**\n     * Searches through locally stored app.tracks array\n     * to find the song track with this id.\n     * BUG: if app.tracks is empty, this function triggers an error.\n     * @param {string} id - musicbrainz id of the track\n     * @return {Object|undefined} undefined if not found, else Track object\n     */\n    return app.tracks.find(function(item) {\n      // find album with this id.\n      return item._id === id;\n    });\n  },\n  loadFromLS: function() {\n    if (typeof window.localStorage !== \"object\") {\n      console.warn(\"Browser does not support local storage.\");\n    } else {\n      if (localStorage.getItem(\"tracks\")) {\n        app.tracks = JSON.parse(localStorage.getItem(\"tracks\"));\n      }\n      if (localStorage.getItem(\"artists\")) {\n        app.artists = JSON.parse(localStorage.getItem(\"artists\"));\n      }\n      if (localStorage.getItem(\"albums\")) {\n        app.albums = JSON.parse(localStorage.getItem(\"albums\"));\n      }\n    }\n  },\n  state: {\n    /**\n     * this object helps keep track of the currently playing song,\n     * albumid, artistid, nextid, previd, play/pause, etc.\n     * @typedef {Object} state\n     * @property {boolean} state.playing - is there a track playing this very second?\n     * @property {(boolean|string)} state.prev - if there is a \"previous\" song in the playlist, its id is stored here. Else false.\n     * @property {(boolean|string)} state.next - if there is a \"next\" song in the playlist, its id is stored here. Else false.\n     *\n     */\n    playing: false,\n    prev: false,\n    next: false\n  },\n  setState: function(state) {\n    /**\n     * knowing the current track in the state,\n     * get the album info and artist info\n     * and insert them into the app.state object.\n     * @param {State} state - the currently playing song\n     * @return {State} state - the UPDATED playing state, with full album info and artist info\n     */\n    app.state = state;\n    app.state.artist = false;\n    app.state.album = false;\n\n    if (app.state.track.artistid && app.artists) {\n      // get the album by id\n      // note, all these albums / artists come from local storage\n      app.state.artist = app.artists.find(function(x) {\n        return x._id === app.state.track.artistid;\n      });\n    }\n\n    if (app.state.track.albumid && app.albums) {\n      // get the album by id\n      // note, all these albums / artists come from local storage\n      app.state.album = app.albums.find(function(x) {\n        return x._id === app.state.track.albumid;\n      });\n    }\n\n    return app.state;\n  }\n};\napp.controls = {\n  /**\n   * app controls\n   * This file manages the \"Now Playing\" bar and app controls\n   * at the bottom of the app.\n   *\n   * The app controls include\n   *    play/pause button,\n   *    previous song button,\n   *    next button\n   *\n   * The \"Now Playing\" bar includes\n   *    track title,\n   *    album title,\n   *    artist title\n  */\n  prev: document.getElementById(\"control__playprev\"),\n  next: document.getElementById(\"control__playnext\"),\n  play: document.getElementById(\"control__playbtn\"),\n  onPrev: function(e) {\n    /**\n     * this function is called by the \"next\" button in the app controls\n     * it is called ONLY by pressing the \"previous\" button\n     * @param {object} e - the event straight from the on(\"click\") listener\n     */\n    e.preventDefault();\n    if (app.state.prev) {\n      // if the API says there is a \"previous\" song that we can play\n      api.stream.prev(app.controls.playResponse);\n    } else {\n      // else error?\n    }\n  },\n  onNext: function(e) {\n    /**\n     * this function is called by the \"next\" button in the app controls\n     * it is called ONLY by pressing the \"next\" button\n     * @param {object} e - the event straight from the on(\"click\") listener\n     */\n    e.preventDefault();\n    if (app.state.next) {\n      // if the API says there is a \"next\" song that we can play\n      api.stream.next(app.controls.playResponse);\n    } else {\n      // else error?\n    }\n  },\n  onPlay: function(e) {\n    /**\n     * this function is called by the \"play\" button in the app controls\n     * it is called ONLY by pressing the play/pause button\n     * it determines whether to\n     * - pause the current song,\n     * - or resume the current song\n     * @param {object} e - the event straight from the on(\"click\") listener\n     */\n    e.preventDefault();\n    if(!app.state.playing) {\n      api.stream.track.play(app.state.track._id, app.controls.playResponse);\n    } else {\n      api.stream.pause(app.controls.playResponse);\n    }\n  },\n  playResponse: function(json) {\n    if (json.error) {\n      console.warn(\"Error, couldn't find item!\",json);\n      alert(\"Error! Could not find item\");\n    } else {\n      console.log(\"playing:\",json);\n\n\n      // open the footer \"now playing\" thing\n      app.foot.open();\n    }\n  }\n};\napp.foot = {\n  trackEl: document.querySelector(\".playing__track__title\"),\n  artistEl: document.querySelector(\".playing__track__artist\"),\n  albumEl: document.querySelector(\".playing__track__album\"),\n  update: function() {\n    /**\n     * fill the footer's \"now playing\" info\n     * using\n     * - app.state.track.title,\n     * - app.state.artist.name, and\n     * - app.state.album.title\n     *\n     * Also, disabled or enables the previous and next buttons\n     * as appropriate, depending on\n     * - app.state.prev !== false and\n     * - app.state.next !== false\n     */\n    var playIcon = app.controls.play.querySelector(\".fa\");\n\n    // update \"now playing\" info\n    app.foot.trackEl.innerHTML = app.state.track.title;\n    app.foot.artistEl.innerHTML = app.state.artist.name;\n    app.foot.albumEl.innerHTML = app.state.album.title;\n\n    // if there is no \"next\" song, disable the button\n    if (!app.state.next) {\n      app.controls.next.classList.add(\"disabled\");\n    } else {\n      app.controls.next.classList.remove(\"disabled\");\n    }\n\n    // if there is no \"previous\" song, disable the button\n    if (!app.state.prev) {\n      app.controls.prev.classList.add(\"disabled\");\n    } else {\n      app.controls.prev.classList.remove(\"disabled\");\n    }\n\n    if (!app.state.playing) {\n      // if paused, show the \"play\" icon\n      playIcon.classList.add(\"fa-play\");\n      playIcon.classList.remove(\"fa-pause\");\n    } else {\n      // if playing, show the \"pause\" icon\n      playIcon.classList.remove(\"fa-play\");\n      playIcon.classList.add(\"fa-pause\");\n    }\n  },\n  open: function() {\n    /**\n     * open the controls / now playing footer\n     * by adding the class .open-footer to the body element.\n     * It's up to the CSS to do something with that class.\n     */\n    document.body.classList.add(\"open-footer\");\n  }\n};\n\napp.init();\n","//main.js - This file does all the app-ish stuff. Includes buttons, animations, and possibly offline functionality.\n\n\n// Buttons!\nvar settingsBtn = document.getElementById(\"btnSettings\"),\n    searchBtn = document.getElementById(\"btnSearch\"),\n    songTab = document.getElementById(\"tab__songs\"),\n    artistTab = document.getElementById(\"tab__artists\"),\n    albumTab = document.getElementById(\"tab__albums\"),\n    statusBar = document.getElementById(\"app-statusbar\");\n\n// the \"Songs\" tab in the app nav\nvar songTabClick = function(e) {\n  /**\n   * Deal with someone clicking the song tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.tracks) {\n    // get all songs\n    api.songs.get({},loadSongs);\n  } else {\n    loadSongs(app.tracks);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  albumTab.classList.remove(\"active\");\n  artistTab.classList.remove(\"active\");\n  songTab.classList.add(\"active\");\n};\n\n// the \"Albums\" tab in the app nav\nvar albumTabClick = function(e) {\n  /**\n   * Deal with someone clicking the album tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.albums) {\n    // get all songs\n    api.albums.get({},loadAlbums);\n  } else {\n    loadAlbums(app.albums);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  songTab.classList.remove(\"active\");\n  artistTab.classList.remove(\"active\");\n  albumTab.classList.add(\"active\");\n};\n\n// the \"Artists\" tab in the app nav\nvar artistTabClick = function(e) {\n  /**\n   * Deal with someone clicking the album tab or pulling to refresh.\n   * later, we'll set refresh = true if someone swiped down.\n   * This allows us to update the local storage if, say, new songs were ripped from a CD.\n   */\n  e.preventDefault();\n\n  if (!app.artists) {\n    // get all songs\n    api.artists.get({},loadArtists);\n  } else {\n    loadArtists(app.artists);\n  }\n\n  // clear status bar\n  statusBar.innerHTML = '';\n\n  // load data into page\n  songTab.classList.remove(\"active\");\n  albumTab.classList.remove(\"active\");\n  artistTab.classList.add(\"active\");\n};\n\n// Data\n// here we set up the loading of song lists, album lists, artist lists, etc.\nvar dataBox = document.getElementById(\"app-data\");\n\nvar openSettings = function() {\n  document.getElementById(\"app-settings\").classList.toggle(\"open\");\n};\n\n\n// events\n// here we set up all the button click events\nsettingsBtn.addEventListener(\"click\",openSettings);\nsongTab.addEventListener(\"click\", songTabClick);\nalbumTab.addEventListener(\"click\", albumTabClick);\nartistTab.addEventListener(\"click\", artistTabClick);\ndocument.getElementById(\"clear__cache\").addEventListener(\"click\", function(e) {\n  if (typeof window.localStorage !== \"undefined\") {\n    // we later may want to clear just app.tracks, app.albums, and app.artists, for example\n    app.albums = false;\n    app.artists = false;\n    app.tracks = false;\n    window.localStorage.clear();\n  }\n  e.preventDefault();\n});\n\n// Get songs\nvar loadSongs = function(json) {\n  var songTemplate = '<div class=\"list-item\" id=\"{_id}\" data-type=\"track\"><div class=\"track__info\"><h4 class=\"title\">{title}</h4><h5 class=\"artist__name\">{artistname}</h5></div><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.tracks = json;\n\n  // for each song, append the artist name\n  if (!json[0].artistname && app.artists.length) {\n    for (var i=0; i < json.length; i++) {\n      // for each stored artist, check the id against the current track.artistid\n      thisArtist = app.getArtistById(json[i].artistid);\n      if (thisArtist) {\n        json[i].artistname = thisArtist.name;\n      }\n    }\n  }\n\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"tracks\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadArtists = function(json) {\n  var songTemplate = '<div class=\"list-item item__artist\" id=\"{_id}\" data-type=\"artist\"><h4 class=\"title\">{name}</h4><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.artists = json;\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"artists\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadAlbums = function(json) {\n  var songTemplate = '<div class=\"list-item item__album\" id=\"{_id}\" data-type=\"album\"><h4 class=\"title\">{title}</h4><div class=\"song-controls\"><button class=\"playBtn\"><span class=\"fa fa-play\"></button></div></div>';\n\n  app.albums = json;\n  if (typeof window.localStorage === \"object\") {\n    localStorage.setItem(\"albums\", JSON.stringify(json));\n  }\n\n  return loadItems(json,songTemplate);\n};\nvar loadItems = function(json, mediaTemplate) {\n  dataBox.innerHTML = '';\n\n  // insert into page\n  for (var i=0;i<json.length;i++) {\n    // use our new template function in the library\n    var song = lib.toDom(lib.template(mediaTemplate,json[i]));\n    dataBox.appendChild(song[0]);\n    \n    var curSong = new mediaItem(document.getElementById(json[i]._id));\n  }\n};\n\n//This object does all the stuff with the song divs.\nvar mediaItem = function(item) {\n  var self = this,\n      playbutton = item.querySelector(\".fa\");\n\n  this.clearBtns = function() {\n    var curPlayingSongBtn = document.querySelector(\".fa.fa-pause\");\n    if (curPlayingSongBtn) {\n      curPlayingSongBtn.classList.remove(\"fa-pause\");\n      curPlayingSongBtn.classList.add(\"fa-play\");\n    }\n  };\n\n  this.play = function(e) {\n    self.clearBtns();\n    item.classList.add(\"active\");\n    playbutton.classList.remove(\"fa-play\");\n    playbutton.classList.add(\"fa-pause\");\n\n    // play the particular type of media\n    switch(item.dataset.type) {\n      case \"album\":\n        // play all the songs in the album\n        api.stream.album.play(item.id, app.controls.playResponse);\n        break;\n      case \"artist\":\n        // play all the songs for the particular artist\n        api.stream.artist.play(item.id, app.controls.playResponse);\n        break;\n      case \"track\":\n        // play this particular song\n        api.stream.track.play(item.id, app.controls.playResponse);\n        break;\n    }\n  };\n\n\n  this.pause = function(e) {\n    item.classList.remove(\"active\");\n    playbutton.classList.add(\"fa-play\");\n    playbutton.classList.remove(\"fa-pause\");\n    api.pause(item.id, function() {\n      console.log(\"Whoa... it's paused!?\",arguments);\n    });\n  };\n\n  this.toggle = function(e) {\n    if (item.classList.contains(\"active\")) {//then song is being played right now.\n      self.pause(e);\n    } else {//else song is currently paused. play it!\n      self.play(e);\n    }\n  };\n\n  // setup the play/pause button event listener\n  item.querySelector(\".playBtn\").addEventListener(\"click\",self.toggle);\n\n  return this;\n};\nvar loadSongsByX = function(e) {\n  var item, opts,\n      album = lib.selectParent(e.target, \".item__album\"),\n      artist = lib.selectParent(e.target, \".item__artist\");\n\n  if (album) {\n    //console.log(\"found album:\", album);\n\t\tif (album) {\n      loadSongsByAlbum(album.id);\n    }\n  } else if (artist) {\n    //console.log(\"found artist:\", artist);\n\t\tif (artist) {\n      loadSongsByArtist(artist.id);\n    }\n\t}\n};\nloadSongsByAlbum = function(albumid) {\n  var thisAlbum = app.getAlbumById(albumid),\n      statusTemplate = \"<h2>{album}</h2><h4>by {artist}</h4>\",\n      dat = {\n        album: thisAlbum.title,\n        artist: app.getArtistById(thisAlbum.artistid).name\n      };\n\n  // put album name in status bar\n  statusBar.innerHTML = lib.template(statusTemplate, dat);\n\n  // query for songs by album ID\n  opts = {\n    albumid: albumid\n  };\n  api.songs.get(opts, loadSongs);\n};\nloadSongsByArtist = function(artistid) {\n  var thisArtist = app.getArtistById(artistid);\n  artistTitle = '<h2>' + thisArtist.name + '</h2>';\n\n  // put artist name in status bar\n  statusBar.innerHTML = artistTitle;\n\n  // query for songs by artist ID\n  opts = {\n    artistid: artistid\n  };\n  api.songs.get(opts, loadSongs);\n};\n\n// on initial page load, show all the songs\nsongTab.click();\n\n// window event listeners - listen for clicks on the non-existent album or artist divs\nwindow.addEventListener(\"click\", loadSongsByX);\n"]}